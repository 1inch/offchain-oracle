{
  "address": "0xFdCB8fA524f84081988e6065Fc8EF060f2CF0C27",
  "abi": [
    {
      "inputs": [],
      "name": "ConnectorShouldBeNone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolWithConnectorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x11a1c96c7b790b2521326cb3efa46a635e6cb338cba93779771fddec3689bb61",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0xFdCB8fA524f84081988e6065Fc8EF060f2CF0C27",
    "transactionIndex": 107,
    "gasUsed": "733338",
    "logsBloom": "0x
    "blockHash": "0xccafd2edcf51d87967957b8554d1ad927b78f328dbed4afd73bdfd2409dfb09c",
    "transactionHash": "0x11a1c96c7b790b2521326cb3efa46a635e6cb338cba93779771fddec3689bb61",
    "logs": [
      {
        "transactionIndex": 107,
        "blockNumber": 41177387,
        "transactionHash": "0x11a1c96c7b790b2521326cb3efa46a635e6cb338cba93779771fddec3689bb61",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000056e44874f624ebde6efcc783efd685f0fbdc6dcf",
          "0x000000000000000000000000794e44d1334a56fea7f4df12633b88820d0c5888"
        ],
        "data": "0x000000000000000000000000000000000000000000000000004f8ec3be7fb534000000000000000000000000000000000000000000000000187cda1779cf403b000000000000000000000000000000000000000000000218bc52fe0237bfea4f000000000000000000000000000000000000000000000000182d4b53bb4f8b07000000000000000000000000000000000000000000000218bca28cc5f63f9f83",
        "logIndex": 503,
        "blockHash": "0xccafd2edcf51d87967957b8554d1ad927b78f328dbed4afd73bdfd2409dfb09c"
      }
    ],
    "blockNumber": 41177387,
    "cumulativeGasUsed": "25389068",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "edb6444afada1f09d5e3ae7cac8824fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ConnectorShouldBeNone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolWithConnectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/UniswapV3Oracle.sol\":\"UniswapV3Oracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOracle {\\n    error ConnectorShouldBeNone();\\n    error PoolNotFound();\\n    error PoolWithConnectorNotFound();\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0xe51a28ebbc62c06d735a5ce85d1a272f20ea3446253eea2f8f6b6a795d7479c2\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IUniswapV3Pool {\\n    function slot0() external view returns (uint160 sqrtPriceX96, int24, uint16, uint16, uint16, uint8, bool);\\n    function ticks(int24 tick) external view returns (uint128, int128, uint256, uint256, int56, uint160, uint32, bool);\\n    function tickSpacing() external view returns (int24);\\n    function token0() external view returns (IERC20 token);\\n    function liquidity() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xe3111d839107e7384ad029277bf4124abfaa8bd20315c82a6784334d9aa3db96\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nlibrary Sqrt {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        unchecked {\\n            if (y > 3) {\\n                z = y;\\n                uint x = y / 2 + 1;\\n                while (x < z) {\\n                    z = x;\\n                    x = (y / x + x) / 2;\\n                }\\n            } else if (y != 0) {\\n                z = 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0caf529fe2654de6c5ea12a198a31f80d38079ed2de73492b8fa8c01ff9198aa\",\"license\":\"MIT\"},\"contracts/oracles/UniswapV3Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"../libraries/Sqrt.sol\\\";\\n\\ncontract UniswapV3Oracle is IOracle {\\n    using Address for address;\\n    using SafeMath for uint256;\\n    using Sqrt for uint256;\\n\\n    bytes32 public constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n    address public constant FACTORY = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n    uint256 private constant _SUPPORTED_FEES_COUNT = 4;\\n    int24 private constant _TICK_STEPS = 2;\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external override view returns (uint256 rate, uint256 weight) {\\n        uint24[_SUPPORTED_FEES_COUNT] memory fees = [uint24(100), 500, 3000, 10000];\\n\\n        unchecked {\\n            if (connector == _NONE) {\\n                for (uint256 i = 0; i < _SUPPORTED_FEES_COUNT; i++) {\\n                    (uint256 rate0, uint256 w) = _getRate(srcToken, dstToken, fees[i]);\\n                    rate = rate.add(rate0.mul(w));\\n                    weight = weight.add(w);\\n                }\\n            } else {\\n                for (uint256 i = 0; i < _SUPPORTED_FEES_COUNT; i++) {\\n                    for (uint256 j = 0; j < _SUPPORTED_FEES_COUNT; j++) {\\n                        (uint256 rate0, uint256 w0) = _getRate(srcToken, connector, fees[i]);\\n                        if (w0 == 0) {\\n                            continue;\\n                        }\\n                        (uint256 rate1, uint256 w1) = _getRate(connector, dstToken, fees[j]);\\n                        if (w1 == 0) {\\n                            continue;\\n                        }\\n\\n                        uint256 w = Math.min(w0, w1);\\n                        rate = rate.add(rate0.mul(rate1).div(1e18).mul(w));\\n                        weight = weight.add(w);\\n                    }\\n                }\\n            }\\n        }\\n\\n        if (weight > 0) {\\n            rate = rate / weight;\\n        }\\n    }\\n\\n    function _getRate(IERC20 srcToken, IERC20 dstToken, uint24 fee) internal view returns (uint256 rate, uint256 liquidity) {\\n        (IERC20 token0, IERC20 token1) = srcToken < dstToken ? (srcToken, dstToken) : (dstToken, srcToken);\\n        address pool = _getPool(address(token0), address(token1), fee);\\n        if (!pool.isContract() ) {\\n            return (0, 0);\\n        }\\n        liquidity = IUniswapV3Pool(pool).liquidity();\\n        if (liquidity == 0) {\\n            return (0, 0);\\n        }\\n        (uint256 sqrtPriceX96, int24 tick,,,,,) = IUniswapV3Pool(pool).slot0();\\n        int24 tickSpacing = IUniswapV3Pool(pool).tickSpacing();\\n        tick = tick / tickSpacing * tickSpacing;\\n        int256 liquidityShiftsLeft = int256(liquidity);\\n        int256 liquidityShiftsRight = int256(liquidity);\\n        for (int24 i = 1; i <= _TICK_STEPS; i++) {\\n            (, int256 liquidityNet,,,,,,) = IUniswapV3Pool(pool).ticks(tick + i * tickSpacing);\\n            liquidityShiftsRight += liquidityNet;\\n            if (liquidityShiftsRight == 0) {\\n                return (0, 0);\\n            }\\n            (, liquidityNet,,,,,,) = IUniswapV3Pool(pool).ticks(tick - i * tickSpacing);\\n            liquidityShiftsLeft -= liquidityNet;\\n            if (liquidityShiftsLeft == 0) {\\n                return (0, 0);\\n            }\\n        }\\n        if (srcToken == token0) {\\n            rate = (((1e18 * sqrtPriceX96) >> 96) * sqrtPriceX96) >> 96;\\n        } else {\\n            rate = (1e18 << 192) / sqrtPriceX96 / sqrtPriceX96;\\n        }\\n    }\\n\\n    function _getPool(address token0, address token1, uint24 fee) private pure returns (address) {\\n        return address(uint160(uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        FACTORY,\\n                        keccak256(abi.encode(token0, token1, fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )));\\n    }\\n}\\n\",\"keccak256\":\"0x4b8820a762669a3ebab7b4be011b96e7e959e66339d051e50cae2e1af4a64bb8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610c63908161001c8239f35b600080fdfe6101a0604081815260048036101561001657600080fd5b600092833560e01c91826314999e79146100ed57505080632dd31000146100a15763dc6fd8ab1461004657600080fd5b3461009d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57602090517fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b548152f35b5080fd5b503461009d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d5760209051731f98431c8ad98523631ae4a59f267346ea31f9848152f35b849192503461009d5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57803573ffffffffffffffffffffffffffffffffffffffff9384821682036103225760243590858216820361031e57604435948686169586810361009d57819782976080850185811067ffffffffffffffff8211176102f2578b52606485526101f46020860152610bb8858c015261271060608601520361021b5750939291905b8385106101d05750505050505b806101bf575b82519182526020820152f35b90816101ca916103f2565b906101b3565b90919293949561021061020461020a6001936101fc62ffffff6101f38c896103b2565b5116888a610570565b809491610467565b9061042b565b9861042b565b9501939291906101a0565b909192825b86811061023357505050505050506101ad565b835b8781106102455750600101610220565b979862ffffff906102638261025a858a6103b2565b5116868a610570565b9283156102e557610281906102788d8b6103b2565b51168688610570565b80949194156102d7579261020460019593670de0b6b3a76400006102b96102bf956102c5988082106000146102cd5750968793610467565b04610467565b9b61042b565b985b01610235565b9050968793610467565b5050509998600191506102c7565b50509998600191506102c7565b60248560418b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8480fd5b8380fd5b6080810190811067ffffffffffffffff82111761034257604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761034257604052565b9060048110156103c35760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81156103fc570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9190820180921161043857565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181029291811591840414171561043857565b51906fffffffffffffffffffffffffffffffff8216820361049757565b600080fd5b519073ffffffffffffffffffffffffffffffffffffffff8216820361049757565b51908160020b820361049757565b519061ffff8216820361049757565b5190811515820361049757565b9060020b9060020b02908160020b91820361043857565b919082610100910312610497576105148261047a565b91602081015180600f0b8103610497579160408201519160608101519160808201518060060b8103610497579161054d60a0820161049c565b9160c082015163ffffffff811681036104975760e061056d9193016104da565b90565b90929173ffffffffffffffffffffffffffffffffffffffff918281169083861680831015610c1f57508380915b1660e06101205280610120515260409362ffffff8551918460209a8b85019586521687840152166060820152606081526105d681610326565b5190208351878101917fff0000000000000000000000000000000000000000000000000000000000000083527f1f98431c8ad98523631ae4a59f267346ea31f984000000000000000000000000602183015260358201527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460558201526055815261066081610326565b5190201694853b15610c115782517f1a68650200000000000000000000000000000000000000000000000000000000815260a0610140526004610140515281816004818a5afa8015610c0657600090610bc2575b6fffffffffffffffffffffffffffffffff915016938415610bb3578351907f3850c7bd00000000000000000000000000000000000000000000000000000000825261012051826101405151818b5afa918215610ba8576000908193610b10575b5016918451907fd0c93a7c00000000000000000000000000000000000000000000000000000000825280826101405151818c5afa8015610b0557600061010052610ac7575b505060c0610180526002610180515260020b956101005160020b8015610a95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821489821416610921576107d8916101009995995191056104e7565b61018051510b928592839060015b88608052610180515181810b13610a205761080461010051826104e7565b61018051510b8701627fffff9085811282821317610921578951917ff30dba93000000000000000000000000000000000000000000000000000000009182845261018051510b610140515184015261010092602461016052838161016051818c5afa908115610a15576000916109f0575b50600f0b9860008a82019a8b1291129080158216911516176109665788156109da576108a461010051856104e7565b61018051510b8a0390811387821217610966578a5191825261018051510b6101405151820152818161016051818a5afa9182156109cf5760009261099a575b5050600f0b988981039060008b1280158284131691831216176109665798608051146109535761018051510b627fffff8114610921576001016107e6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601161014051515260246000fd5b5050505050505050509050600090600090565b7f4e487b71000000000000000000000000000000000000000000000000000000006000526011610140515152610160516000fd5b6109b99250803d106109c8575b6109b18183610371565b8101906104fe565b505050505050905038806108e3565b503d6109a7565b8a513d6000823e3d90fd5b5050505050505050505050509050600090600090565b610a079150843d86116109c8576109b18183610371565b505050505050905038610875565b8c513d6000823e3d90fd5b5096509697945050505050610120515114600014610a6057670de0b6b3a764000090808202918204810361092157610a5a9160601c610467565b60601c91565b8015610a955780610a92917f0de0b6b3a7640000000000000000000000000000000000000000000000000000046103f2565b91565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601261014051515260246000fd5b81813d8311610afe575b610adb8183610371565b81010312610af757610aec906104bd565b610100523880610759565b6101005180fd5b503d610ad1565b86513d6000823e3d90fd5b909250610120513d6101205111610ba1575b610b2c8183610371565b81610120519181010312610b9d57610b438161049c565b90610b4f8582016104bd565b93610b5b8883016104cb565b50610b68606083016104cb565b50610b75608083016104cb565b506101405182015160ff811603610b9a575060c0610b9391016104da565b5038610714565b80fd5b8280fd5b503d610b22565b85513d6000823e3d90fd5b50505050509050600090600090565b8282813d8311610bff575b610bd78183610371565b81010312610b9a5750610bfa6fffffffffffffffffffffffffffffffff9161047a565b6106b4565b503d610bcd565b84513d6000823e3d90fd5b505050509050600090600090565b91955050938280829661059d56fea2646970667358221220295e6e0116eb9b43086f03889d01c104b08cd96ad54d7db44302cc6451dae5a764736f6c63430008130033",
  "deployedBytecode": "0x6101a0604081815260048036101561001657600080fd5b600092833560e01c91826314999e79146100ed57505080632dd31000146100a15763dc6fd8ab1461004657600080fd5b3461009d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57602090517fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b548152f35b5080fd5b503461009d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d5760209051731f98431c8ad98523631ae4a59f267346ea31f9848152f35b849192503461009d5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009d57803573ffffffffffffffffffffffffffffffffffffffff9384821682036103225760243590858216820361031e57604435948686169586810361009d57819782976080850185811067ffffffffffffffff8211176102f2578b52606485526101f46020860152610bb8858c015261271060608601520361021b5750939291905b8385106101d05750505050505b806101bf575b82519182526020820152f35b90816101ca916103f2565b906101b3565b90919293949561021061020461020a6001936101fc62ffffff6101f38c896103b2565b5116888a610570565b809491610467565b9061042b565b9861042b565b9501939291906101a0565b909192825b86811061023357505050505050506101ad565b835b8781106102455750600101610220565b979862ffffff906102638261025a858a6103b2565b5116868a610570565b9283156102e557610281906102788d8b6103b2565b51168688610570565b80949194156102d7579261020460019593670de0b6b3a76400006102b96102bf956102c5988082106000146102cd5750968793610467565b04610467565b9b61042b565b985b01610235565b9050968793610467565b5050509998600191506102c7565b50509998600191506102c7565b60248560418b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8480fd5b8380fd5b6080810190811067ffffffffffffffff82111761034257604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761034257604052565b9060048110156103c35760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81156103fc570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9190820180921161043857565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181029291811591840414171561043857565b51906fffffffffffffffffffffffffffffffff8216820361049757565b600080fd5b519073ffffffffffffffffffffffffffffffffffffffff8216820361049757565b51908160020b820361049757565b519061ffff8216820361049757565b5190811515820361049757565b9060020b9060020b02908160020b91820361043857565b919082610100910312610497576105148261047a565b91602081015180600f0b8103610497579160408201519160608101519160808201518060060b8103610497579161054d60a0820161049c565b9160c082015163ffffffff811681036104975760e061056d9193016104da565b90565b90929173ffffffffffffffffffffffffffffffffffffffff918281169083861680831015610c1f57508380915b1660e06101205280610120515260409362ffffff8551918460209a8b85019586521687840152166060820152606081526105d681610326565b5190208351878101917fff0000000000000000000000000000000000000000000000000000000000000083527f1f98431c8ad98523631ae4a59f267346ea31f984000000000000000000000000602183015260358201527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460558201526055815261066081610326565b5190201694853b15610c115782517f1a68650200000000000000000000000000000000000000000000000000000000815260a0610140526004610140515281816004818a5afa8015610c0657600090610bc2575b6fffffffffffffffffffffffffffffffff915016938415610bb3578351907f3850c7bd00000000000000000000000000000000000000000000000000000000825261012051826101405151818b5afa918215610ba8576000908193610b10575b5016918451907fd0c93a7c00000000000000000000000000000000000000000000000000000000825280826101405151818c5afa8015610b0557600061010052610ac7575b505060c0610180526002610180515260020b956101005160020b8015610a95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821489821416610921576107d8916101009995995191056104e7565b61018051510b928592839060015b88608052610180515181810b13610a205761080461010051826104e7565b61018051510b8701627fffff9085811282821317610921578951917ff30dba93000000000000000000000000000000000000000000000000000000009182845261018051510b610140515184015261010092602461016052838161016051818c5afa908115610a15576000916109f0575b50600f0b9860008a82019a8b1291129080158216911516176109665788156109da576108a461010051856104e7565b61018051510b8a0390811387821217610966578a5191825261018051510b6101405151820152818161016051818a5afa9182156109cf5760009261099a575b5050600f0b988981039060008b1280158284131691831216176109665798608051146109535761018051510b627fffff8114610921576001016107e6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601161014051515260246000fd5b5050505050505050509050600090600090565b7f4e487b71000000000000000000000000000000000000000000000000000000006000526011610140515152610160516000fd5b6109b99250803d106109c8575b6109b18183610371565b8101906104fe565b505050505050905038806108e3565b503d6109a7565b8a513d6000823e3d90fd5b5050505050505050505050509050600090600090565b610a079150843d86116109c8576109b18183610371565b505050505050905038610875565b8c513d6000823e3d90fd5b5096509697945050505050610120515114600014610a6057670de0b6b3a764000090808202918204810361092157610a5a9160601c610467565b60601c91565b8015610a955780610a92917f0de0b6b3a7640000000000000000000000000000000000000000000000000000046103f2565b91565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601261014051515260246000fd5b81813d8311610afe575b610adb8183610371565b81010312610af757610aec906104bd565b610100523880610759565b6101005180fd5b503d610ad1565b86513d6000823e3d90fd5b909250610120513d6101205111610ba1575b610b2c8183610371565b81610120519181010312610b9d57610b438161049c565b90610b4f8582016104bd565b93610b5b8883016104cb565b50610b68606083016104cb565b50610b75608083016104cb565b506101405182015160ff811603610b9a575060c0610b9391016104da565b5038610714565b80fd5b8280fd5b503d610b22565b85513d6000823e3d90fd5b50505050509050600090600090565b8282813d8311610bff575b610bd78183610371565b81010312610b9a5750610bfa6fffffffffffffffffffffffffffffffff9161047a565b6106b4565b503d610bcd565b84513d6000823e3d90fd5b505050509050600090600090565b91955050938280829661059d56fea2646970667358221220295e6e0116eb9b43086f03889d01c104b08cd96ad54d7db44302cc6451dae5a764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}