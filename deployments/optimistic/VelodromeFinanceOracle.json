{
  "address": "0xD7936052D1e096d48C81Ef3918F9Fd6384108480",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_initcodeHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initcodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb1dc5d619cfb6d019b8e1c251064957d97510b213ab49af34bcb1734c46ed031",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xD7936052D1e096d48C81Ef3918F9Fd6384108480",
    "transactionIndex": 0,
    "gasUsed": "395461",
    "logsBloom": "0x
    "blockHash": "0x70fc60e11aa187c93205a0396aca899e9220dd7562d9b93e6da25bfa965bc926",
    "transactionHash": "0xb1dc5d619cfb6d019b8e1c251064957d97510b213ab49af34bcb1734c46ed031",
    "logs": [],
    "blockNumber": 27130557,
    "cumulativeGasUsed": "395461",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x25cbddb98b35ab1ff77413456b31ec81a6b6b746",
    "0xc1ac28b1c4ebe53c0cff67bab5878c4eb68759bb1e9f73977cd266b247d149f0"
  ],
  "numDeployments": 1,
  "solcInputHash": "349869773c4f0d877f16fdce3d550d66",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_initcodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initcodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/SolidlyOracle.sol\":\"SolidlyOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IOracle {\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0x79a4ea9de990b73c5ee60ba5c8273e28ebf3a0c85297c9fde1c7f202b0527e2d\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\n\\ninterface IUniswapV2Pair {\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n}\\n\",\"keccak256\":\"0x9d037d44e0fea0983bf5d32a980b793d6bbd5be685be96cd87b40d8360a0f372\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\n\\nlibrary Sqrt {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        unchecked {\\n            if (y > 3) {\\n                z = y;\\n                uint x = y / 2 + 1;\\n                while (x < z) {\\n                    z = x;\\n                    x = (y / x + x) / 2;\\n                }\\n            } else if (y != 0) {\\n                z = 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d1e9c161f5ea08953aa0069c696263bb9c0e3a5601f307253b5174d9a10e4b4\",\"license\":\"MIT\"},\"contracts/oracles/OracleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../libraries/Sqrt.sol\\\";\\n\\n\\nabstract contract OracleBase is IOracle {\\n    using Sqrt for uint256;\\n\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view override returns (uint256 rate, uint256 weight) {\\n        uint256 balance0;\\n        uint256 balance1;\\n        if (connector == _NONE) {\\n            (balance0, balance1) = _getBalances(srcToken, dstToken);\\n        } else {\\n            uint256 balanceConnector0;\\n            uint256 balanceConnector1;\\n            (balance0, balanceConnector0) = _getBalances(srcToken, connector);\\n            (balanceConnector1, balance1) = _getBalances(connector, dstToken);\\n            if (balanceConnector0 > balanceConnector1) {\\n                balance0 = balance0 * balanceConnector1 / balanceConnector0;\\n            } else {\\n                balance1 = balance1 * balanceConnector0 / balanceConnector1;\\n            }\\n        }\\n\\n        rate = balance1 * 1e18 / balance0;\\n        weight = (balance0 * balance1).sqrt();\\n    }\\n\\n    function _getBalances(IERC20 srcToken, IERC20 dstToken) internal view virtual returns (uint256 srcBalance, uint256 dstBalance);\\n}\\n\",\"keccak256\":\"0x551935e3de6dc9210c95fc09a86849a6394369daa3b427d8c75c4ce2863168d6\",\"license\":\"MIT\"},\"contracts/oracles/SolidlyOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nimport \\\"./OracleBase.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../libraries/Sqrt.sol\\\";\\n\\ncontract SolidlyOracle is IOracle {\\n    using Sqrt for uint256;\\n\\n    address public immutable factory;\\n    bytes32 public immutable initcodeHash;\\n\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    constructor(address _factory, bytes32 _initcodeHash) {\\n        factory = _factory;\\n        initcodeHash = _initcodeHash;\\n    }\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view override returns (uint256 rate, uint256 weight) {\\n        require(connector == _NONE, \\\"SO: connector should be None\\\");\\n        for (uint256 i = 1; i < 2; i++) {\\n            (uint256 b0, uint256 b1) = _getBalances(srcToken, dstToken, i == 0 ? true : false);\\n            uint256 w = b0 * b1;\\n            rate = rate + b1 * 1e18 / b0 * w;\\n            weight = weight + w;\\n        }\\n\\n        if (weight > 0) {\\n            unchecked { rate /= weight; }\\n            weight = weight.sqrt();\\n        }\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function _pairFor(IERC20 tokenA, IERC20 tokenB, bool stable) private view returns (address pair) {\\n        pair = address(uint160(uint256(keccak256(abi.encodePacked(\\n                hex\\\"ff\\\",\\n                factory,\\n                keccak256(abi.encodePacked(tokenA, tokenB, stable)),\\n                initcodeHash\\n            )))));\\n    }\\n\\n    function _getBalances(IERC20 srcToken, IERC20 dstToken, bool stable) internal view returns (uint256 srcBalance, uint256 dstBalance) {\\n        (IERC20 token0, IERC20 token1) = srcToken < dstToken ? (srcToken, dstToken) : (dstToken, srcToken);\\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(_pairFor(token0, token1, stable)).getReserves();\\n        (srcBalance, dstBalance) = srcToken == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n}\\n\",\"keccak256\":\"0x77efb1dc6fd5748791375f622f16b0fc043dc90831e4089834989344026e85c9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516106b23803806106b28339818101604052604081101561003357600080fd5b5080516020909101516001600160a01b0390911660805260a05260805160a05161063461007e6000396000818160a9015261037e01526000818160e2015261034a01526106346000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806314999e79146100465780635a4fb9a8146100a4578063c45a0155146100dd575b600080fd5b61008b6004803603606081101561005c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040909101351661012d565b6040805192835260208301919091528051918290030190f35b6100cb7f000000000000000000000000000000000000000000000000000000000000000081565b60408051918252519081900360200190f35b6101047f000000000000000000000000000000000000000000000000000000000000000081565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008073ffffffffffffffffffffffffffffffffffffffff838116146101b457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f534f3a20636f6e6e6563746f722073686f756c64206265204e6f6e6500000000604482015290519081900360640190fd5b60015b6002811015610245576000806101dc888885156101d5576000610272565b6001610272565b909250905060006101ed8284610507565b9050808361020384670de0b6b3a7640000610507565b61020d9190610573565b6102179190610507565b61022190876105ae565b955061022d81866105ae565b9450505050808061023d906105c6565b9150506101b7565b50801561026a5780828161025b5761025b610544565b0491506102678161047a565b90505b935093915050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16106102b25785876102b5565b86865b915091506000806103c0848489604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606095861b811660208084019190915294861b8116603483015292151560f81b6048820152815160298183030181526049820183528051908501207fff0000000000000000000000000000000000000000000000000000000000000060698301527f000000000000000000000000000000000000000000000000000000000000000090951b909216606a830152607e8201939093527f0000000000000000000000000000000000000000000000000000000000000000609e808301919091528351808303909101815260be909101909252815191012090565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561040a573d6000803e3d6000fd5b505050506040513d606081101561042057600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff8981169085161461046757808261046a565b81815b909a909950975050505050505050565b600060038211156104c9575080600160028204015b818110156104c3578091506002818285816104ac576104ac610544565b0401816104bb576104bb610544565b04905061048f565b50919050565b81156104d3575060015b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561053f5761053f6104d8565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826105a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082198211156105c1576105c16104d8565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036105f7576105f76104d8565b506001019056fea2646970667358221220e3a57b5fbe85c501759d031bb59282b4ca665d1d6722a43071d71e3522648b8c64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806314999e79146100465780635a4fb9a8146100a4578063c45a0155146100dd575b600080fd5b61008b6004803603606081101561005c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040909101351661012d565b6040805192835260208301919091528051918290030190f35b6100cb7f000000000000000000000000000000000000000000000000000000000000000081565b60408051918252519081900360200190f35b6101047f000000000000000000000000000000000000000000000000000000000000000081565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008073ffffffffffffffffffffffffffffffffffffffff838116146101b457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f534f3a20636f6e6e6563746f722073686f756c64206265204e6f6e6500000000604482015290519081900360640190fd5b60015b6002811015610245576000806101dc888885156101d5576000610272565b6001610272565b909250905060006101ed8284610507565b9050808361020384670de0b6b3a7640000610507565b61020d9190610573565b6102179190610507565b61022190876105ae565b955061022d81866105ae565b9450505050808061023d906105c6565b9150506101b7565b50801561026a5780828161025b5761025b610544565b0491506102678161047a565b90505b935093915050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16106102b25785876102b5565b86865b915091506000806103c0848489604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606095861b811660208084019190915294861b8116603483015292151560f81b6048820152815160298183030181526049820183528051908501207fff0000000000000000000000000000000000000000000000000000000000000060698301527f000000000000000000000000000000000000000000000000000000000000000090951b909216606a830152607e8201939093527f0000000000000000000000000000000000000000000000000000000000000000609e808301919091528351808303909101815260be909101909252815191012090565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561040a573d6000803e3d6000fd5b505050506040513d606081101561042057600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff8981169085161461046757808261046a565b81815b909a909950975050505050505050565b600060038211156104c9575080600160028204015b818110156104c3578091506002818285816104ac576104ac610544565b0401816104bb576104bb610544565b04905061048f565b50919050565b81156104d3575060015b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561053f5761053f6104d8565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826105a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082198211156105c1576105c16104d8565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036105f7576105f76104d8565b506001019056fea2646970667358221220e3a57b5fbe85c501759d031bb59282b4ca665d1d6722a43071d71e3522648b8c64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}