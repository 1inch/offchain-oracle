{
  "address": "0x8606321723D9cA7db708A8b12DAd0A8a83f2F3bD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_initcodeHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ConnectorShouldBeNone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MathOverflowedMulDiv",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolWithConnectorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INITCODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "thresholdFilter",
          "type": "uint256"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb753612fb77346d685fbc855c2ad70ef74c47a006248540520381ddef5468f8d",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0x8606321723D9cA7db708A8b12DAd0A8a83f2F3bD",
    "transactionIndex": 2,
    "gasUsed": "947036",
    "logsBloom": "0x
    "blockHash": "0x9a813bcee2da6ae79bf88defa08d1546cb97beaa83d3c1d5d5aaf43cfc4926d6",
    "transactionHash": "0xb753612fb77346d685fbc855c2ad70ef74c47a006248540520381ddef5468f8d",
    "logs": [],
    "blockNumber": 125577256,
    "cumulativeGasUsed": "1011887",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF1046053aa5682b4F9a81b5481394DA16BE5FF5a",
    "0xc0629f1c7daa09624e54d4f711ba99922a844907cce02997176399e4cc7e8fcf"
  ],
  "numDeployments": 1,
  "solcInputHash": "12d62abac890db1499ed51319d5efa79",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_initcodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ConnectorShouldBeNone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolWithConnectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITCODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"thresholdFilter\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/SolidlyOracle.sol\":\"SolidlyOracle\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x00c23b80f74717a6765b606001c5c633116020d488ee8f53600685b8200e4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOracle {\\n    error ConnectorShouldBeNone();\\n    error PoolNotFound();\\n    error PoolWithConnectorNotFound();\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector, uint256 thresholdFilter) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0xac06788d609ed5f178e04cc3cffed0607ca444607f4c81abb947bbf1cf91707d\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.23;\\n\\ninterface IUniswapV2Pair {\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n}\\n\",\"keccak256\":\"0xe15245974fccb116ed7c87f9c502d36ab1ade915fb151582f49af61873ea4347\",\"license\":\"UNLICENSED\"},\"contracts/libraries/OraclePrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title OraclePrices\\n * @notice A library that provides functionalities for processing and analyzing token rate and weight data provided by an oracle.\\n *         The library is used when an oracle uses multiple pools to determine a token's price.\\n *         It allows to filter out pools with low weight and significantly incorrect price, which could distort the weighted price.\\n *         The level of low-weight pool filtering can be managed using the thresholdFilter parameter.\\n */\\nlibrary OraclePrices {\\n    using Math for uint256;\\n\\n    /**\\n    * @title Oracle Price Data Structure\\n    * @notice This structure encapsulates the rate and weight information for tokens as provided by an oracle\\n    * @dev An array of OraclePrice structures can be used to represent oracle data for multiple pools\\n    * @param rate The oracle-provided rate for a token\\n    * @param weight The oracle-provided derived weight for a token\\n    */\\n    struct OraclePrice {\\n        uint256 rate;\\n        uint256 weight;\\n    }\\n\\n    /**\\n    * @title Oracle Prices Data Structure\\n    * @notice This structure encapsulates information about a list of oracles prices and weights\\n    * @dev The structure is initialized with a maximum possible length by the `init` function\\n    * @param oraclePrices An array of OraclePrice structures, each containing a rate and weight\\n    * @param maxOracleWeight The maximum weight among the OraclePrice elements in the oraclePrices array\\n    * @param size The number of meaningful OraclePrice elements added to the oraclePrices array\\n    */\\n    struct Data {\\n        uint256 maxOracleWeight;\\n        uint256 size;\\n        OraclePrice[] oraclePrices;\\n    }\\n\\n    /**\\n    * @notice Initializes an array of OraclePrices with a given maximum length and returns it wrapped inside a Data struct\\n    * @dev Uses inline assembly for memory allocation to avoid array zeroing and extra array copy to struct\\n    * @param maxArrLength The maximum length of the oraclePrices array\\n    * @return data Returns an instance of Data struct containing an OraclePrice array with a specified maximum length\\n    */\\n    function init(uint256 maxArrLength) internal pure returns (Data memory data) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            data := mload(0x40)\\n            mstore(0x40, add(data, add(0x80, mul(maxArrLength, 0x40))))\\n            mstore(add(data, 0x00), 0)\\n            mstore(add(data, 0x20), 0)\\n            mstore(add(data, 0x40), add(data, 0x60))\\n            mstore(add(data, 0x60), maxArrLength)\\n        }\\n    }\\n\\n    /**\\n    * @notice Appends an OraclePrice to the oraclePrices array in the provided Data struct if the OraclePrice has a non-zero weight\\n    * @dev If the weight of the OraclePrice is greater than the current maxOracleWeight, the maxOracleWeight is updated. The size (number of meaningful elements) of the array is incremented after appending the OraclePrice.\\n    * @param data The Data struct that contains the oraclePrices array, maxOracleWeight, and the current size\\n    * @param oraclePrice The OraclePrice to be appended to the oraclePrices array\\n    * @return isAppended A flag indicating whether the oraclePrice was appended or not\\n    */\\n    function append(Data memory data, OraclePrice memory oraclePrice) internal pure returns (bool isAppended) {\\n        if (oraclePrice.weight > 0) {\\n            data.oraclePrices[data.size] = oraclePrice;\\n            data.size++;\\n            if (oraclePrice.weight > data.maxOracleWeight) {\\n                data.maxOracleWeight = oraclePrice.weight;\\n            }\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n    * @notice Calculates the weighted rate from the oracle prices data using a threshold filter\\n    * @dev Shrinks the `oraclePrices` array to remove any unused space, though it's unclear how this optimizes the code, but it is. Then calculates the weighted rate\\n    *      considering only the oracle prices whose weight is above the threshold which is percent from max weight\\n    * @param data The data structure containing oracle prices, the maximum oracle weight and the size of the used oracle prices array\\n    * @param thresholdFilter The threshold to filter oracle prices based on their weight\\n    * @return weightedRate The calculated weighted rate\\n    * @return totalWeight The total weight of the oracle prices that passed the threshold\\n    */\\n    function getRateAndWeight(Data memory data, uint256 thresholdFilter) internal pure returns (uint256 weightedRate, uint256 totalWeight) {\\n        // shrink oraclePrices array\\n        uint256 size = data.size;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(add(data, 64))\\n            mstore(ptr, size)\\n        }\\n\\n        // calculate weighted rate\\n        for (uint256 i = 0; i < size; i++) {\\n            OraclePrice memory p = data.oraclePrices[i];\\n            if (p.weight * 100 < data.maxOracleWeight * thresholdFilter) {\\n                continue;\\n            }\\n            weightedRate += p.rate * p.weight;\\n            totalWeight += p.weight;\\n        }\\n        if (totalWeight > 0) {\\n            unchecked { weightedRate /= totalWeight; }\\n        }\\n    }\\n\\n    /**\\n    * @notice See `getRateAndWeight`. It uses SafeMath to prevent overflows.\\n    */\\n    function getRateAndWeightWithSafeMath(Data memory data, uint256 thresholdFilter) internal pure returns (uint256 weightedRate, uint256 totalWeight) {\\n        // shrink oraclePrices array\\n        uint256 size = data.size;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(add(data, 64))\\n            mstore(ptr, size)\\n        }\\n\\n        // calculate weighted rate\\n        for (uint256 i = 0; i < size; i++) {\\n            OraclePrice memory p = data.oraclePrices[i];\\n            if (p.weight * 100 < data.maxOracleWeight * thresholdFilter) {\\n                continue;\\n            }\\n            (bool ok, uint256 weightedRateI) = p.rate.tryMul(p.weight);\\n            if (ok) {\\n                (ok, weightedRate) = _tryAdd(weightedRate, weightedRateI);\\n                if (ok) totalWeight += p.weight;\\n            }\\n        }\\n        if (totalWeight > 0) {\\n            unchecked { weightedRate /= totalWeight; }\\n        }\\n    }\\n\\n    function _tryAdd(uint256 value, uint256 addition) private pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 result = value + addition;\\n            if (result < value) return (false, value);\\n            return (true, result);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2f2b57376ac6f8b4a594312b5771f514bef4579ef2cb1dcf1b60bd278ae3495a\",\"license\":\"MIT\"},\"contracts/oracles/OracleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\nabstract contract OracleBase is IOracle {\\n    using Math for uint256;\\n\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector, uint256 /*thresholdFilter*/) external view override returns (uint256 rate, uint256 weight) {\\n        uint256 balance0;\\n        uint256 balance1;\\n        if (connector == _NONE) {\\n            (balance0, balance1) = _getBalances(srcToken, dstToken);\\n            weight = (balance0 * balance1).sqrt();\\n        } else {\\n            uint256 balanceConnector0;\\n            uint256 balanceConnector1;\\n            (balance0, balanceConnector0) = _getBalances(srcToken, connector);\\n            (balanceConnector1, balance1) = _getBalances(connector, dstToken);\\n            if (balanceConnector0 > balanceConnector1) {\\n                balance0 = Math.mulDiv(balance0, balanceConnector1, balanceConnector0);\\n            } else {\\n                balance1 = Math.mulDiv(balance1, balanceConnector0, balanceConnector1);\\n            }\\n            weight = Math.min(balance0 * balanceConnector0, balance1 * balanceConnector1).sqrt();\\n        }\\n\\n        rate = Math.mulDiv(balance1, 1e18, balance0);\\n    }\\n\\n    function _getBalances(IERC20 srcToken, IERC20 dstToken) internal view virtual returns (uint256 srcBalance, uint256 dstBalance);\\n}\\n\",\"keccak256\":\"0x653d0d5c0e18620a490af28a3c7d1c781adc90ac278bc73d2b95e2e47e1a1b2a\",\"license\":\"MIT\"},\"contracts/oracles/SolidlyOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"./OracleBase.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../libraries/OraclePrices.sol\\\";\\n\\ncontract SolidlyOracle is IOracle {\\n    using OraclePrices for OraclePrices.Data;\\n    using Math for uint256;\\n\\n    address public immutable FACTORY;\\n    bytes32 public immutable INITCODE_HASH;\\n\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    constructor(address _factory, bytes32 _initcodeHash) {\\n        FACTORY = _factory;\\n        INITCODE_HASH = _initcodeHash;\\n    }\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector, uint256 thresholdFilter) external view override returns (uint256 rate, uint256 weight) {\\n        uint256 srcDecimals = IERC20Metadata(address(srcToken)).decimals();\\n        uint256 dstDecimals = IERC20Metadata(address(dstToken)).decimals();\\n        if (connector == _NONE) {\\n            (rate, weight) = _getWeightedRate(srcToken, dstToken, srcDecimals, dstDecimals, thresholdFilter);\\n        } else {\\n            uint256 connectorDecimals = IERC20Metadata(address(connector)).decimals();\\n            (uint256 rateC0, uint256 weightC0) = _getWeightedRate(srcToken, connector, srcDecimals, connectorDecimals, thresholdFilter);\\n            (uint256 rateC1, uint256 weightC1) = _getWeightedRate(connector, dstToken, connectorDecimals, dstDecimals, thresholdFilter);\\n            rate = rateC0 * rateC1 / 1e18;\\n            weight = Math.min(weightC0, weightC1);\\n        }\\n    }\\n\\n    function _getWeightedRate(IERC20 srcToken, IERC20 dstToken, uint256 srcDecimals, uint256 dstDecimals, uint256 thresholdFilter) internal view returns (uint256 rate, uint256 weight) {\\n        OraclePrices.Data memory ratesAndWeights = OraclePrices.init(2);\\n        (uint256 b0, uint256 b1) = _getBalances(srcToken, dstToken, true);\\n        if (b0 > 0) {\\n            uint256 _x = (b0 * 1e18) / 10 ** srcDecimals; // b0 converted to 1e18 decimals format\\n            uint256 _y = (b1 * 1e18) / 10 ** dstDecimals; // b1 converted to 1e18 decimals format\\n            uint256 _a = (_x * _y) / 1e18;\\n            uint256 _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\\n            uint256 xy = (_a * _b) / 1e18;\\n\\n            (uint256 y, bool error) = _getY(1e18 + _x , xy, _y); // calculation for 1 src token converted to 1e18 decimals format\\n            if (!error) {\\n                uint256 amountOut = b1 - y / (10 ** (18 - dstDecimals));\\n                ratesAndWeights.append(OraclePrices.OraclePrice(amountOut, (b0 * b1).sqrt()));\\n            }\\n        }\\n        (b0, b1) = _getBalances(srcToken, dstToken, false);\\n        if (b0 > 0) {\\n            ratesAndWeights.append(OraclePrices.OraclePrice(Math.mulDiv(b1, 1e18, b0), (b0 * b1).sqrt()));\\n        }\\n        (rate, weight) = ratesAndWeights.getRateAndWeight(thresholdFilter);\\n    }\\n\\n    // Helper function to compute 'y' based on the stable swap invariant\\n    function _getY(uint256 x0, uint256 xy, uint256 y0) internal pure returns (uint256 y, bool error) {\\n        y = y0;\\n        for (uint256 i = 0; i < 255; i++) {\\n            uint256 k = _f(x0, y);\\n            if (k < xy) {\\n                uint256 dy = ((xy - k) * 1e18) / _d(x0, y);\\n                if (dy == 0) {\\n                    return (y, false);\\n                }\\n                y = y + dy;\\n            } else {\\n                uint256 dy = ((k - xy) * 1e18) / _d(x0, y);\\n                if (dy == 0) {\\n                    return (y, false);\\n                }\\n                y = y - dy;\\n            }\\n        }\\n        return (0, true);\\n    }\\n\\n    // Internal functions '_f' and '_d' as per the original code\\n    function _f(uint256 x0, uint256 y) internal pure returns (uint256) {\\n        uint256 _a = (x0 * y) / 1e18;\\n        uint256 _b = ((x0 * x0) / 1e18 + (y * y) / 1e18);\\n        return (_a * _b) / 1e18;\\n    }\\n\\n    function _d(uint256 x0, uint256 y) internal pure returns (uint256) {\\n        return (3 * x0 * ((y * y) / 1e18)) / 1e18 + ((((x0 * x0) / 1e18) * x0) / 1e18);\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function _pairFor(IERC20 tokenA, IERC20 tokenB, bool stable) internal virtual view returns (address pair) {\\n        pair = address(uint160(uint256(keccak256(abi.encodePacked(\\n                hex\\\"ff\\\",\\n                FACTORY,\\n                keccak256(abi.encodePacked(tokenA, tokenB, stable)),\\n                INITCODE_HASH\\n            )))));\\n    }\\n\\n    function _getBalances(IERC20 srcToken, IERC20 dstToken, bool stable) internal view returns (uint256 srcBalance, uint256 dstBalance) {\\n        (IERC20 token0, IERC20 token1) = srcToken < dstToken ? (srcToken, dstToken) : (dstToken, srcToken);\\n        (bool success, bytes memory data) = _pairFor(token0, token1, stable).staticcall(abi.encodeWithSelector(IUniswapV2Pair.getReserves.selector));\\n        if (success && data.length == 96) {\\n            (srcBalance, dstBalance) = abi.decode(data, (uint256, uint256));\\n            (srcBalance, dstBalance) = srcToken == token0 ? (srcBalance, dstBalance) : (dstBalance, srcBalance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1bcb393ab00f3454d481714c9785b0f68fa494234aa794dbdfd5629f9ea87b7c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c03461009757601f6110e438819003918201601f19168301916001600160401b0383118484101761009b578084926040948552833981010312610097578051906001600160a01b038216820361009757602001519060805260a05260405161103490816100b082396080518181816102c9015281816105cb01526107d3015260a0518181816073015281816105fa01526108020152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040908082526004361015610014575f80fd5b5f3560e01c9081632dd3100014610281575080633d549b321461009a5763f84618841461003f575f80fd5b34610096575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009657602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5f80fd5b50346100965760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100965773ffffffffffffffffffffffffffffffffffffffff6004358181169081810361009657602435928084168085036100965760443594828616938487036100965760643594885196877f313ce567000000000000000000000000000000000000000000000000000000009182825281600460209b8c935afa801561025a5760ff8a916004935f91610264575b5016968c51928380928682525afa801561025a5760ff915f9161023d575b5016958203610196575050610189959650610467565b90915b8351928352820152f35b879060048b98949598979397518098819382525afa938415610233576101df836101e7958b9360ff6101ed99670de0b6b3a76400009b8e5f92610206575b505016948592610467565b979099610467565b956103c8565b0492808210156101ff57505b9061018c565b90506101f9565b6102259250803d1061022c575b61021d818361036e565b8101906103af565b5f8e6101d4565b503d610213565b89513d5f823e3d90fd5b61025491508a3d8c1161022c5761021d818361036e565b5f610173565b8b513d5f823e3d90fd5b61027b9150833d851161022c5761021d818361036e565b5f610155565b34610096575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100965760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b6040810190811067ffffffffffffffff82111761030957604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6060810190811067ffffffffffffffff82111761030957604052565b6080810190811067ffffffffffffffff82111761030957604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761030957604052565b90816020910312610096575160ff811681036100965790565b818102929181159184041417156103db57565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8115610412570490565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b604d81116103db57600a0a90565b919082018092116103db57565b919082039182116103db57565b916040516060810181811067ffffffffffffffff8211176103095760609160409182525f81525f602082015201526040519361010085016040525f85525f6020860152600260608601806040880152525f905f9273ffffffffffffffffffffffffffffffffffffffff851673ffffffffffffffffffffffffffffffffffffffff8716105f14610bd357855f8073ffffffffffffffffffffffffffffffffffffffff885b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060405191818760601b16602084015260601b1660348201527f010000000000000000000000000000000000000000000000000000000000000060488201526029815261057681610336565b6020815191012060405160208101917fff0000000000000000000000000000000000000000000000000000000000000083527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060601b16602183015260358201527f000000000000000000000000000000000000000000000000000000000000000060558201526055815261062b81610352565b51902016604051907f0902f1ac00000000000000000000000000000000000000000000000000000000602083015260048252610666826102ed565b602082519201905afa3d15610bcb573d9067ffffffffffffffff821161030957604051916106bc60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018461036e565b82523d5f602084013e5b80610bc0575b610b5e575b50508215908115610a69575b50505050505f905f9273ffffffffffffffffffffffffffffffffffffffff821673ffffffffffffffffffffffffffffffffffffffff8216105f14610a32575f8073ffffffffffffffffffffffffffffffffffffffff83945b6040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000006020820192818960601b16845260601b1660348201528360488201526029815261078281610336565b51902060405160208101917fff0000000000000000000000000000000000000000000000000000000000000083527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060601b16602183015260358201527f000000000000000000000000000000000000000000000000000000000000000060558201526055815261083381610352565b5190201660405160208101907f0902f1ac0000000000000000000000000000000000000000000000000000000082526004815261086f816102ed565b51915afa903d15610a2a573d9167ffffffffffffffff831161030957604051926108c160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018561036e565b83523d5f602085013e5b80610a1f575b6109d2575b50505080610991575b5050905f915f916020820151806040840151525f925b818410610917575050505080610909579091565b908161091491610408565b91565b90919293610929856040840151610e22565b5195602087019687516064908181029181830414901517156103db576109508786516103c8565b11610985579161097261097a9261096c600195518b51906103c8565b9061044d565b97519061044d565b945b019291906108f5565b5095509360019061097c565b6109b06109ab836109a5846109ca96610ee0565b936103c8565b610ce1565b604051916109bd836102ed565b8252602082015282610e63565b505f806108df565b91935091506040828051810103126100965773ffffffffffffffffffffffffffffffffffffffff806040602085015194015194169116145f14610a1a57905b905f80806108d6565b610a11565b5060608251146108d1565b6060916108cb565b9073ffffffffffffffffffffffffffffffffffffffff16905f8073ffffffffffffffffffffffffffffffffffffffff808416610735565b670de0b6b3a76400009182850290858204841417156103db57610a8e610a949261043f565b90610408565b8185028581048314861517156103db57610ab190610a8e8561043f565b9082610ae981610ac185856103c8565b04610ae383610ad086806103c8565b0484610adc88806103c8565b049061044d565b906103c8565b049080840184116103db57610afe9301610c09565b91909115610b0d575b806106dd565b6012818103116103db57610b54936109a5610b34610b3a94610a8e6109ab9560120361043f565b8261045a565b60405191610b47836102ed565b8252602082015284610e63565b505f808080610b07565b6040919550808093955051810103126100965773ffffffffffffffffffffffffffffffffffffffff60406020830151920151941673ffffffffffffffffffffffffffffffffffffffff8716145f14610bbb57925b92915f806106d1565b610bb2565b5060608151146106cc565b6060906106c6565b73ffffffffffffffffffffffffffffffffffffffff85165f8073ffffffffffffffffffffffffffffffffffffffff808a1661050a565b9091905f915b60ff8310610c2257505050505f90600190565b670de0b6b3a764000080610c4981610c3a85876103c8565b04610ae383610ad088806103c8565b048580821015610ca15790610c5d9161045a565b8181029181830414901517156103db57610c7b90610a8e8385610fb4565b908115610c9757600191610c8e9161044d565b925b0191610c0f565b9350505050905f90565b610caa9161045a565b8181029181830414901517156103db57610cc890610a8e8385610fb4565b908115610c9757600191610cdb9161045a565b92610c90565b8015610e1d57610dab815f908360801c80610e11575b508060401c80610e04575b508060201c80610df7575b508060101c80610dea575b508060081c80610ddd575b508060041c80610dd0575b508060021c80610dc3575b50600191828092811c610dbc575b1c1b610d538185610408565b01811c610d608185610408565b01811c610d6d8185610408565b01811c610d7a8185610408565b01811c610d878185610408565b01811c610d948185610408565b01811c610da18185610408565b01901c8092610408565b80821015610db7575090565b905090565b0181610d47565b600291509101905f610d39565b600491509101905f610d2e565b600891509101905f610d23565b601091509101905f610d18565b602091509101905f610d0d565b604091509101905f610d02565b9150506080905f610cf7565b505f90565b8051821015610e365760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b9060208101908151610e76575050505f90565b610e976040840151916020850192835191610e918383610e22565b52610e22565b5080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146103db576001019052519080518211610ed8575b5050600190565b525f80610ed1565b670de0b6b3a764000091828202917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84820993838086109503948086039514610fa45784831115610f7a57829109815f038216809204600280826003021880830282030280830282030280830282030280830282030280830282030280920290030293600183805f03040190848311900302920304170290565b60046040517f227bc153000000000000000000000000000000000000000000000000000000008152fd5b505090610fb19250610408565b90565b80600302916003830482036103db57610adc610fe491610feb610fb195670de0b6b3a764000080958482956103c8565b04906103c8565b049282610ff882806103c8565b046103c856fea2646970667358221220e7ae43a8952682639f0109439da04bab8d1ae8c1147225d34489acf1102909a564736f6c63430008170033",
  "deployedBytecode": "0x60806040908082526004361015610014575f80fd5b5f3560e01c9081632dd3100014610281575080633d549b321461009a5763f84618841461003f575f80fd5b34610096575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009657602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5f80fd5b50346100965760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100965773ffffffffffffffffffffffffffffffffffffffff6004358181169081810361009657602435928084168085036100965760443594828616938487036100965760643594885196877f313ce567000000000000000000000000000000000000000000000000000000009182825281600460209b8c935afa801561025a5760ff8a916004935f91610264575b5016968c51928380928682525afa801561025a5760ff915f9161023d575b5016958203610196575050610189959650610467565b90915b8351928352820152f35b879060048b98949598979397518098819382525afa938415610233576101df836101e7958b9360ff6101ed99670de0b6b3a76400009b8e5f92610206575b505016948592610467565b979099610467565b956103c8565b0492808210156101ff57505b9061018c565b90506101f9565b6102259250803d1061022c575b61021d818361036e565b8101906103af565b5f8e6101d4565b503d610213565b89513d5f823e3d90fd5b61025491508a3d8c1161022c5761021d818361036e565b5f610173565b8b513d5f823e3d90fd5b61027b9150833d851161022c5761021d818361036e565b5f610155565b34610096575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100965760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b6040810190811067ffffffffffffffff82111761030957604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6060810190811067ffffffffffffffff82111761030957604052565b6080810190811067ffffffffffffffff82111761030957604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761030957604052565b90816020910312610096575160ff811681036100965790565b818102929181159184041417156103db57565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8115610412570490565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b604d81116103db57600a0a90565b919082018092116103db57565b919082039182116103db57565b916040516060810181811067ffffffffffffffff8211176103095760609160409182525f81525f602082015201526040519361010085016040525f85525f6020860152600260608601806040880152525f905f9273ffffffffffffffffffffffffffffffffffffffff851673ffffffffffffffffffffffffffffffffffffffff8716105f14610bd357855f8073ffffffffffffffffffffffffffffffffffffffff885b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060405191818760601b16602084015260601b1660348201527f010000000000000000000000000000000000000000000000000000000000000060488201526029815261057681610336565b6020815191012060405160208101917fff0000000000000000000000000000000000000000000000000000000000000083527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060601b16602183015260358201527f000000000000000000000000000000000000000000000000000000000000000060558201526055815261062b81610352565b51902016604051907f0902f1ac00000000000000000000000000000000000000000000000000000000602083015260048252610666826102ed565b602082519201905afa3d15610bcb573d9067ffffffffffffffff821161030957604051916106bc60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018461036e565b82523d5f602084013e5b80610bc0575b610b5e575b50508215908115610a69575b50505050505f905f9273ffffffffffffffffffffffffffffffffffffffff821673ffffffffffffffffffffffffffffffffffffffff8216105f14610a32575f8073ffffffffffffffffffffffffffffffffffffffff83945b6040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000006020820192818960601b16845260601b1660348201528360488201526029815261078281610336565b51902060405160208101917fff0000000000000000000000000000000000000000000000000000000000000083527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060601b16602183015260358201527f000000000000000000000000000000000000000000000000000000000000000060558201526055815261083381610352565b5190201660405160208101907f0902f1ac0000000000000000000000000000000000000000000000000000000082526004815261086f816102ed565b51915afa903d15610a2a573d9167ffffffffffffffff831161030957604051926108c160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018561036e565b83523d5f602085013e5b80610a1f575b6109d2575b50505080610991575b5050905f915f916020820151806040840151525f925b818410610917575050505080610909579091565b908161091491610408565b91565b90919293610929856040840151610e22565b5195602087019687516064908181029181830414901517156103db576109508786516103c8565b11610985579161097261097a9261096c600195518b51906103c8565b9061044d565b97519061044d565b945b019291906108f5565b5095509360019061097c565b6109b06109ab836109a5846109ca96610ee0565b936103c8565b610ce1565b604051916109bd836102ed565b8252602082015282610e63565b505f806108df565b91935091506040828051810103126100965773ffffffffffffffffffffffffffffffffffffffff806040602085015194015194169116145f14610a1a57905b905f80806108d6565b610a11565b5060608251146108d1565b6060916108cb565b9073ffffffffffffffffffffffffffffffffffffffff16905f8073ffffffffffffffffffffffffffffffffffffffff808416610735565b670de0b6b3a76400009182850290858204841417156103db57610a8e610a949261043f565b90610408565b8185028581048314861517156103db57610ab190610a8e8561043f565b9082610ae981610ac185856103c8565b04610ae383610ad086806103c8565b0484610adc88806103c8565b049061044d565b906103c8565b049080840184116103db57610afe9301610c09565b91909115610b0d575b806106dd565b6012818103116103db57610b54936109a5610b34610b3a94610a8e6109ab9560120361043f565b8261045a565b60405191610b47836102ed565b8252602082015284610e63565b505f808080610b07565b6040919550808093955051810103126100965773ffffffffffffffffffffffffffffffffffffffff60406020830151920151941673ffffffffffffffffffffffffffffffffffffffff8716145f14610bbb57925b92915f806106d1565b610bb2565b5060608151146106cc565b6060906106c6565b73ffffffffffffffffffffffffffffffffffffffff85165f8073ffffffffffffffffffffffffffffffffffffffff808a1661050a565b9091905f915b60ff8310610c2257505050505f90600190565b670de0b6b3a764000080610c4981610c3a85876103c8565b04610ae383610ad088806103c8565b048580821015610ca15790610c5d9161045a565b8181029181830414901517156103db57610c7b90610a8e8385610fb4565b908115610c9757600191610c8e9161044d565b925b0191610c0f565b9350505050905f90565b610caa9161045a565b8181029181830414901517156103db57610cc890610a8e8385610fb4565b908115610c9757600191610cdb9161045a565b92610c90565b8015610e1d57610dab815f908360801c80610e11575b508060401c80610e04575b508060201c80610df7575b508060101c80610dea575b508060081c80610ddd575b508060041c80610dd0575b508060021c80610dc3575b50600191828092811c610dbc575b1c1b610d538185610408565b01811c610d608185610408565b01811c610d6d8185610408565b01811c610d7a8185610408565b01811c610d878185610408565b01811c610d948185610408565b01811c610da18185610408565b01901c8092610408565b80821015610db7575090565b905090565b0181610d47565b600291509101905f610d39565b600491509101905f610d2e565b600891509101905f610d23565b601091509101905f610d18565b602091509101905f610d0d565b604091509101905f610d02565b9150506080905f610cf7565b505f90565b8051821015610e365760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b9060208101908151610e76575050505f90565b610e976040840151916020850192835191610e918383610e22565b52610e22565b5080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146103db576001019052519080518211610ed8575b5050600190565b525f80610ed1565b670de0b6b3a764000091828202917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84820993838086109503948086039514610fa45784831115610f7a57829109815f038216809204600280826003021880830282030280830282030280830282030280830282030280830282030280920290030293600183805f03040190848311900302920304170290565b60046040517f227bc153000000000000000000000000000000000000000000000000000000008152fd5b505090610fb19250610408565b90565b80600302916003830482036103db57610adc610fe491610feb610fb195670de0b6b3a764000080958482956103c8565b04906103c8565b049282610ff882806103c8565b046103c856fea2646970667358221220e7ae43a8952682639f0109439da04bab8d1ae8c1147225d34489acf1102909a564736f6c63430008170033",
  "devdoc": {
    "errors": {
      "MathOverflowedMulDiv()": [
        {
          "details": "Muldiv operation overflow."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}