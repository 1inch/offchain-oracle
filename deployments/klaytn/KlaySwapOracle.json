{
  "address": "0x26271DFdDBD250014F87F0F302C099d5a798BaB1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IKlaySwapFactory",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "contract IKlaySwapStorage",
          "name": "storage_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a21eafd7b4242ec43c58904d78414d4efeb7710fcb879b715885a01b7693caa",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x26271DFdDBD250014F87F0F302C099d5a798BaB1",
    "transactionIndex": 1,
    "gasUsed": "452365",
    "logsBloom": "0x
    "blockHash": "0x123cc9f4240365ea2bed346a45ee801e3ae540e362205555b85ab928cff85b86",
    "transactionHash": "0x9a21eafd7b4242ec43c58904d78414d4efeb7710fcb879b715885a01b7693caa",
    "logs": [],
    "blockNumber": 97808771,
    "cumulativeGasUsed": "504748",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc6a2ad8cc6e4a7e08fc37cc5954be07d499e7654",
    "0x1289550d988177575154c2CA45c95CCfb32F837d"
  ],
  "numDeployments": 1,
  "solcInputHash": "99ed531030de0715e6d65ac48f740dd0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IKlaySwapFactory\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"contract IKlaySwapStorage\",\"name\":\"storage_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/KlaySwapOracle.sol\":\"KlaySwapOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IOracle {\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0x79a4ea9de990b73c5ee60ba5c8273e28ebf3a0c85297c9fde1c7f202b0527e2d\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\n\\ninterface IUniswapV2Pair {\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n}\\n\",\"keccak256\":\"0x9d037d44e0fea0983bf5d32a980b793d6bbd5be685be96cd87b40d8360a0f372\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\n\\nlibrary Sqrt {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        unchecked {\\n            if (y > 3) {\\n                z = y;\\n                uint x = y / 2 + 1;\\n                while (x < z) {\\n                    z = x;\\n                    x = (y / x + x) / 2;\\n                }\\n            } else if (y != 0) {\\n                z = 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d1e9c161f5ea08953aa0069c696263bb9c0e3a5601f307253b5174d9a10e4b4\",\"license\":\"MIT\"},\"contracts/oracles/KlaySwapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nimport \\\"./OracleBase.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\n\\ninterface IKlaySwapFactory {\\n    function tokenToPool(IERC20 tokenA, IERC20 tokenB) external view returns(address pool);\\n}\\n\\ninterface IKlaySwapStorage {\\n    function getReserves(address pool) external view returns(uint256 reserve0, uint256 reserve1, uint256 timestamp);\\n}\\n\\ncontract KlaySwapOracle is OracleBase {\\n    IKlaySwapFactory private immutable _factory;\\n    IKlaySwapStorage private immutable _storage;\\n\\n    constructor(IKlaySwapFactory factory_, IKlaySwapStorage storage_) {\\n        _factory = factory_;\\n        _storage = storage_;\\n    }\\n\\n    function _getBalances(IERC20 srcToken, IERC20 dstToken) internal view override returns (uint256 srcBalance, uint256 dstBalance) {\\n        (IERC20 token0, IERC20 token1) = srcToken < dstToken ? (srcToken, dstToken) : (dstToken, srcToken);\\n        (uint256 reserve0, uint256 reserve1,) = _storage.getReserves(_factory.tokenToPool(token0, token1));\\n        (srcBalance, dstBalance) = srcToken == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n}\\n\",\"keccak256\":\"0x1362180efa954cc2d114ed856e585bd852582e03fb4532ffb69ff55b51452873\",\"license\":\"MIT\"},\"contracts/oracles/OracleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../libraries/Sqrt.sol\\\";\\n\\n\\nabstract contract OracleBase is IOracle {\\n    using Sqrt for uint256;\\n\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view override returns (uint256 rate, uint256 weight) {\\n        uint256 balance0;\\n        uint256 balance1;\\n        if (connector == _NONE) {\\n            (balance0, balance1) = _getBalances(srcToken, dstToken);\\n        } else {\\n            uint256 balanceConnector0;\\n            uint256 balanceConnector1;\\n            (balance0, balanceConnector0) = _getBalances(srcToken, connector);\\n            (balanceConnector1, balance1) = _getBalances(connector, dstToken);\\n            if (balanceConnector0 > balanceConnector1) {\\n                balance0 = balance0 * balanceConnector1 / balanceConnector0;\\n            } else {\\n                balance1 = balance1 * balanceConnector0 / balanceConnector1;\\n            }\\n        }\\n\\n        rate = balance1 * 1e18 / balance0;\\n        weight = (balance0 * balance1).sqrt();\\n    }\\n\\n    function _getBalances(IERC20 srcToken, IERC20 dstToken) internal view virtual returns (uint256 srcBalance, uint256 dstBalance);\\n}\\n\",\"keccak256\":\"0x551935e3de6dc9210c95fc09a86849a6394369daa3b427d8c75c4ce2863168d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516105693803806105698339818101604052604081101561003357600080fd5b5080516020909101516001600160a01b039182166080521660a05260805160a0516104f661007360003960006101cc0152600061020801526104f66000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806314999e7914610030575b600080fd5b6100756004803603606081101561004657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040909101351661008e565b6040805192835260208301919091528051918290030190f35b60008080807fffffffffffffffffffffffff000000000000000000000000000000000000000173ffffffffffffffffffffffffffffffffffffffff8616016100e4576100da8787610180565b9092509050610143565b6000806100f18988610180565b90945091506101008789610180565b9350905080821115610128578161011782866103f2565b6101219190610485565b9350610140565b8061013383856103f2565b61013d9190610485565b92505b50505b8161015682670de0b6b3a76400006103f2565b6101609190610485565b935061017461016f82846103f2565b610394565b92505050935093915050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16106101c05784866101c3565b85855b915091506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633e99c1e47f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fd435cb987876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381865afa1580156102b0573d6000803e3d6000fd5b505050506040513d60208110156102c657600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301525160248083019260609291908290030181865afa158015610337573d6000803e3d6000fd5b505050506040513d606081101561034d57600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff88811690851614610382578082610385565b81815b90999098509650505050505050565b600060038211156103e3575080600160028204015b818110156103dd578091506002818285816103c6576103c6610456565b0401816103d5576103d5610456565b0490506103a9565b50919050565b81156103ed575060015b919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610451577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826104bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220f3d5a0be1b8728b07b9dc564b42a865490f9ebdb32f715354391718ff08faaec64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806314999e7914610030575b600080fd5b6100756004803603606081101561004657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040909101351661008e565b6040805192835260208301919091528051918290030190f35b60008080807fffffffffffffffffffffffff000000000000000000000000000000000000000173ffffffffffffffffffffffffffffffffffffffff8616016100e4576100da8787610180565b9092509050610143565b6000806100f18988610180565b90945091506101008789610180565b9350905080821115610128578161011782866103f2565b6101219190610485565b9350610140565b8061013383856103f2565b61013d9190610485565b92505b50505b8161015682670de0b6b3a76400006103f2565b6101609190610485565b935061017461016f82846103f2565b610394565b92505050935093915050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16106101c05784866101c3565b85855b915091506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633e99c1e47f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fd435cb987876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381865afa1580156102b0573d6000803e3d6000fd5b505050506040513d60208110156102c657600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301525160248083019260609291908290030181865afa158015610337573d6000803e3d6000fd5b505050506040513d606081101561034d57600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff88811690851614610382578082610385565b81815b90999098509650505050505050565b600060038211156103e3575080600160028204015b818110156103dd578091506002818285816103c6576103c6610456565b0401816103d5576103d5610456565b0490506103a9565b50919050565b81156103ed575060015b919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610451577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826104bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220f3d5a0be1b8728b07b9dc564b42a865490f9ebdb32f715354391718ff08faaec64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}