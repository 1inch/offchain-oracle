{
  "address": "0x41674e58F339fE1caB03CA8DF095D46B998E6125",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDVMFactory",
          "name": "_DVMFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DVMFactory",
      "outputs": [
        {
          "internalType": "contract IDVMFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd6bd0655169764ddbd67222efb52879b446e3443f734d136ea4fb0834e61a2b5",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0x41674e58F339fE1caB03CA8DF095D46B998E6125",
    "transactionIndex": 1,
    "gasUsed": "641292",
    "logsBloom": "0x
    "blockHash": "0x4a36c753dd1cb6025aa1ddcea8ddea8bc6d94c867a316bd203001f680f9c72d9",
    "transactionHash": "0xd6bd0655169764ddbd67222efb52879b446e3443f734d136ea4fb0834e61a2b5",
    "logs": [],
    "blockNumber": 72340402,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5515363c0412AdD5c72d3E302fE1bD7dCBCF93Fe"
  ],
  "numDeployments": 1,
  "solcInputHash": "953e00ee9631c36088e0d36ed8e133df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDVMFactory\",\"name\":\"_DVMFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DVMFactory\",\"outputs\":[{\"internalType\":\"contract IDVMFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/DodoV2Oracle.sol\":\"DodoV2Oracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IDodo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable private-vars-leading-underscore\\n// solhint-disable func-name-mixedcase\\n\\ninterface IDodo {\\n    function _BASE_BALANCE_() external view returns (uint256);\\n    function _QUOTE_BALANCE_() external view returns (uint256);\\n    function getMidPrice() external view returns (uint256 midPrice);\\n}\\n\\ninterface IDVM {\\n    function _BASE_RESERVE_() external view returns (uint256);\\n    function _QUOTE_RESERVE_() external view returns (uint256);\\n    function getMidPrice() external view returns (uint256 midPrice);\\n}\\n\",\"keccak256\":\"0xffff902664120eea89409d8d121892bf77358169d34519895bcc90d40fa81db8\",\"license\":\"MIT\"},\"contracts/interfaces/IDodoFactories.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IDodoZoo {\\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\\n}\\n\\ninterface IDVMFactory {\\n    function getDODOPool(address baseToken, address quoteToken) external view returns (address[] memory machines);\\n}\\n\",\"keccak256\":\"0xe74f00996f8a7487fcbf8d587f54a49d5445697f81939182b6d850c23cc5cd33\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IOracle {\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0x79a4ea9de990b73c5ee60ba5c8273e28ebf3a0c85297c9fde1c7f202b0527e2d\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\n\\nlibrary Sqrt {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        unchecked {\\n            if (y > 3) {\\n                z = y;\\n                uint x = y / 2 + 1;\\n                while (x < z) {\\n                    z = x;\\n                    x = (y / x + x) / 2;\\n                }\\n            } else if (y != 0) {\\n                z = 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d1e9c161f5ea08953aa0069c696263bb9c0e3a5601f307253b5174d9a10e4b4\",\"license\":\"MIT\"},\"contracts/oracles/DodoV2Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IDodo.sol\\\";\\nimport \\\"../interfaces/IDodoFactories.sol\\\";\\nimport \\\"../libraries/Sqrt.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ncontract DodoV2Oracle is IOracle {\\n    using Sqrt for uint256;\\n\\n    IDVMFactory public immutable DVMFactory;\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    constructor(IDVMFactory _DVMFactory) {\\n        DVMFactory = _DVMFactory;\\n    }\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view override returns (uint256 rate, uint256 weight) {\\n        if (connector == _NONE) {\\n            (address[] memory machines, bool isSrcBase) = _getMachines(address(srcToken), address(dstToken));\\n            for (uint256 i = 0; i < machines.length; i++) {\\n                IDVM dvm = IDVM(machines[i]);\\n                (uint256 r, uint256 b0, uint256 b1) = _getDodoInfo(dvm, isSrcBase);\\n                uint256 w = b0 * b1;\\n                rate += r * w;\\n                weight += w;\\n            }\\n        } else {\\n            (address[] memory machines0, bool isSrcBase0) = _getMachines(address(srcToken), address(connector));\\n            (address[] memory machines1, bool isSrcBase1) = _getMachines(address(connector), address(dstToken));\\n            for (uint256 i = 0; i < machines0.length; i++) {\\n                (uint256 r0, uint256 b0, uint256 bc0) = _getDodoInfo(IDVM(machines0[i]), isSrcBase0);\\n                if (b0 == 0 || bc0 == 0) {\\n                    continue;\\n                }\\n                for (uint256 j = 0; j < machines1.length; j++) {\\n                    (uint256 r1, uint256 bc1, uint256 b1) = _getDodoInfo(IDVM(machines1[j]), isSrcBase1);\\n                    if (b1 == 0 || bc1 == 0) {\\n                        continue;\\n                    }\\n                    if (bc0 > bc1) {\\n                        b0 = b0 * bc1 / bc0;\\n                    } else {\\n                        b1 = b1 * bc0 / bc1;\\n                    }\\n                    uint256 w = b0 * b1;\\n                    rate += r0 * r1 * w / 1e18;\\n                    weight += w;\\n                }\\n            }\\n        }\\n\\n        if(weight > 0) {\\n            unchecked { rate /= weight; }\\n            weight = weight.sqrt();\\n        }\\n    }\\n\\n    function _getMachines(address srcToken, address dstToken) internal view returns (address[] memory machines, bool isSrcBase) {\\n        machines = DVMFactory.getDODOPool(srcToken, dstToken);\\n        isSrcBase = (machines.length != 0);\\n        if (!isSrcBase) machines = DVMFactory.getDODOPool(dstToken, srcToken);\\n        require(machines.length != 0, \\\"DOV2: machines not found\\\");\\n    }\\n\\n    function _getDodoInfo(IDVM dvm, bool isSrcBase) internal view returns (uint256 rate, uint256 balanceSrc, uint256 balanceDst) {\\n            uint256 b0 = dvm._BASE_RESERVE_();\\n            uint256 b1 = dvm._QUOTE_RESERVE_();\\n            if (b0 != 0 && b1 != 0) {\\n                uint256 price = dvm.getMidPrice();\\n                rate += isSrcBase ? price : 1e36 / price;\\n                (balanceSrc, balanceDst) = isSrcBase ? (b0, b1) : (b1, b0);\\n            }\\n        }\\n}\\n\",\"keccak256\":\"0x0b6aeddf92a2c8cf56f205c971460c846e586af1423803cf4466755bd1561f36\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610b16380380610b168339818101604052602081101561003357600080fd5b50516001600160a01b0316608052608051610aad61006960003960008181609e0152818161038501526105110152610aad6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806314999e791461003b57806378d2909414610099575b600080fd5b6100806004803603606081101561005157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166100e9565b6040805192835260208301919091528051918290030190f35b6100c07f000000000000000000000000000000000000000000000000000000000000000081565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6000807fffffffffffffffffffffffff000000000000000000000000000000000000000173ffffffffffffffffffffffffffffffffffffffff8416016101ca57600080610136878761037f565b9150915060005b82518110156101c257600083828151811061015a5761015a610922565b6020026020010151905060008060006101738487610706565b9194509250905060006101868284610980565b90506101928185610980565b61019c908b6109bd565b99506101a8818a6109bd565b9850505050505080806101ba906109d5565b91505061013d565b505050610353565b6000806101d7878661037f565b915091506000806101e8878961037f565b9150915060005b845181101561034d57600080600061022088858151811061021257610212610922565b602002602001015188610706565b9250925092508160001480610233575080155b156102405750505061033b565b60005b86518110156103365760008060006102748a858151811061026657610266610922565b60200260200101518a610706565b9250925092508060001480610287575081155b1561029457505050610324565b818511156102b857846102a78388610980565b6102b19190610a3c565b95506102d0565b816102c38683610980565b6102cd9190610a3c565b90505b60006102dc8288610980565b9050670de0b6b3a7640000816102f2868b610980565b6102fc9190610980565b6103069190610a3c565b8f61031191906109bd565b9e5061031d818f6109bd565b9d50505050505b8061032e816109d5565b915050610243565b505050505b80610345816109d5565b9150506101ef565b50505050505b80156103775780828161036857610368610a0d565b049150610374816108c4565b90505b935093915050565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166357a281dc85856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381865afa15801561042d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561047457600080fd5b810190808051604051939291908464010000000082111561049457600080fd5b9083019060208201858111156104a957600080fd5b82518660208202830111640100000000821117156104c657600080fd5b82525081516020918201928201910280838360005b838110156104f35781810151838201526020016104db565b50505050905001604052505050915081516000141590508061068f577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166357a281dc84866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381865afa1580156105b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561060057600080fd5b810190808051604051939291908464010000000082111561062057600080fd5b90830190602082018581111561063557600080fd5b825186602082028301116401000000008211171561065257600080fd5b82525081516020918201928201910280838360005b8381101561067f578181015183820152602001610667565b5050505090500160405250505091505b81516000036106ff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f444f56323a206d616368696e6573206e6f7420666f756e640000000000000000604482015290519081900360640190fd5b9250929050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff16637d7215046040518163ffffffff1660e01b8152600401602060405180830381865afa158015610757573d6000803e3d6000fd5b505050506040513d602081101561076d57600080fd5b5051604080517fbbf5ce78000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff89169163bbf5ce789160048083019260209291908290030181865afa1580156107e0573d6000803e3d6000fd5b505050506040513d60208110156107f657600080fd5b50519050811580159061080857508015155b156108bb5760008773ffffffffffffffffffffffffffffffffffffffff1663ee27c6896040518163ffffffff1660e01b8152600401602060405180830381865afa15801561085a573d6000803e3d6000fd5b505050506040513d602081101561087057600080fd5b505190508661089757610892816ec097ce7bc90715b34b9f1000000000610a3c565b610899565b805b6108a390876109bd565b9550866108b15781836108b4565b82825b9095509350505b50509250925092565b60006003821115610913575080600160028204015b8181101561090d578091506002818285816108f6576108f6610a0d565b04018161090557610905610a0d565b0490506108d9565b50919050565b811561091d575060015b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156109b8576109b8610951565b500290565b600082198211156109d0576109d0610951565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0657610a06610951565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610a72577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212209e8352536664eb06b88e961c1d306387af0b7fb51b80049a7b40a37f071ddc1664736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806314999e791461003b57806378d2909414610099575b600080fd5b6100806004803603606081101561005157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166100e9565b6040805192835260208301919091528051918290030190f35b6100c07f000000000000000000000000000000000000000000000000000000000000000081565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6000807fffffffffffffffffffffffff000000000000000000000000000000000000000173ffffffffffffffffffffffffffffffffffffffff8416016101ca57600080610136878761037f565b9150915060005b82518110156101c257600083828151811061015a5761015a610922565b6020026020010151905060008060006101738487610706565b9194509250905060006101868284610980565b90506101928185610980565b61019c908b6109bd565b99506101a8818a6109bd565b9850505050505080806101ba906109d5565b91505061013d565b505050610353565b6000806101d7878661037f565b915091506000806101e8878961037f565b9150915060005b845181101561034d57600080600061022088858151811061021257610212610922565b602002602001015188610706565b9250925092508160001480610233575080155b156102405750505061033b565b60005b86518110156103365760008060006102748a858151811061026657610266610922565b60200260200101518a610706565b9250925092508060001480610287575081155b1561029457505050610324565b818511156102b857846102a78388610980565b6102b19190610a3c565b95506102d0565b816102c38683610980565b6102cd9190610a3c565b90505b60006102dc8288610980565b9050670de0b6b3a7640000816102f2868b610980565b6102fc9190610980565b6103069190610a3c565b8f61031191906109bd565b9e5061031d818f6109bd565b9d50505050505b8061032e816109d5565b915050610243565b505050505b80610345816109d5565b9150506101ef565b50505050505b80156103775780828161036857610368610a0d565b049150610374816108c4565b90505b935093915050565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166357a281dc85856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381865afa15801561042d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561047457600080fd5b810190808051604051939291908464010000000082111561049457600080fd5b9083019060208201858111156104a957600080fd5b82518660208202830111640100000000821117156104c657600080fd5b82525081516020918201928201910280838360005b838110156104f35781810151838201526020016104db565b50505050905001604052505050915081516000141590508061068f577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166357a281dc84866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381865afa1580156105b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561060057600080fd5b810190808051604051939291908464010000000082111561062057600080fd5b90830190602082018581111561063557600080fd5b825186602082028301116401000000008211171561065257600080fd5b82525081516020918201928201910280838360005b8381101561067f578181015183820152602001610667565b5050505090500160405250505091505b81516000036106ff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f444f56323a206d616368696e6573206e6f7420666f756e640000000000000000604482015290519081900360640190fd5b9250929050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff16637d7215046040518163ffffffff1660e01b8152600401602060405180830381865afa158015610757573d6000803e3d6000fd5b505050506040513d602081101561076d57600080fd5b5051604080517fbbf5ce78000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff89169163bbf5ce789160048083019260209291908290030181865afa1580156107e0573d6000803e3d6000fd5b505050506040513d60208110156107f657600080fd5b50519050811580159061080857508015155b156108bb5760008773ffffffffffffffffffffffffffffffffffffffff1663ee27c6896040518163ffffffff1660e01b8152600401602060405180830381865afa15801561085a573d6000803e3d6000fd5b505050506040513d602081101561087057600080fd5b505190508661089757610892816ec097ce7bc90715b34b9f1000000000610a3c565b610899565b805b6108a390876109bd565b9550866108b15781836108b4565b82825b9095509350505b50509250925092565b60006003821115610913575080600160028204015b8181101561090d578091506002818285816108f6576108f6610a0d565b04018161090557610905610a0d565b0490506108d9565b50919050565b811561091d575060015b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156109b8576109b8610951565b500290565b600082198211156109d0576109d0610951565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0657610a06610951565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610a72577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212209e8352536664eb06b88e961c1d306387af0b7fb51b80049a7b40a37f071ddc1664736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}