{
  "address": "0x7dd73CADbDb285b30Cdb92A5572eff6331EED857",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDodoZoo",
          "name": "_dodoZoo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ConnectorShouldBeNone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolWithConnectorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "contract IDodoZoo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8bd1e38be2d2447e5481742906f51e35f2a4db3d11d3bffc4e239b663bb4e214",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0x7dd73CADbDb285b30Cdb92A5572eff6331EED857",
    "transactionIndex": 0,
    "gasUsed": "521621",
    "logsBloom": "0x
    "blockHash": "0xf08874eca3f5b4cf606a3c9b12348921e367bae15b3597823830cf566c82be07",
    "transactionHash": "0x8bd1e38be2d2447e5481742906f51e35f2a4db3d11d3bffc4e239b663bb4e214",
    "logs": [],
    "blockNumber": 100248166,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf50BDc9E90B7a1c138cb7935071b85c417C4cb8e"
  ],
  "numDeployments": 1,
  "solcInputHash": "fd1dd62bbe05f2095434872ea0a42332",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDodoZoo\",\"name\":\"_dodoZoo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ConnectorShouldBeNone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolWithConnectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"contract IDodoZoo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/DodoOracle.sol\":\"DodoOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/interfaces/IDodo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable private-vars-leading-underscore\\n// solhint-disable func-name-mixedcase\\n\\ninterface IDodo {\\n    function _BASE_BALANCE_() external view returns (uint256);\\n    function _QUOTE_BALANCE_() external view returns (uint256);\\n    function getMidPrice() external view returns (uint256 midPrice);\\n}\\n\\ninterface IDVM {\\n    function _BASE_RESERVE_() external view returns (uint256);\\n    function _QUOTE_RESERVE_() external view returns (uint256);\\n    function getMidPrice() external view returns (uint256 midPrice);\\n}\\n\",\"keccak256\":\"0x286c0a0b949560b7b8a05fa9b01d6a1389244f6bc39b817ba7c5c3e2a548e570\",\"license\":\"MIT\"},\"contracts/interfaces/IDodoFactories.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDodoZoo {\\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\\n}\\n\\ninterface IDVMFactory {\\n    function getDODOPool(address baseToken, address quoteToken) external view returns (address[] memory machines);\\n}\\n\",\"keccak256\":\"0xf91de0b9373b48536733cfe098668bf2ad5ec3b3b6c9be5d52af13b1c05ecfed\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOracle {\\n    error ConnectorShouldBeNone();\\n    error PoolNotFound();\\n    error PoolWithConnectorNotFound();\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector, uint256 thresholdFilter) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0xd194baa5fd0dd28b8a3c1882d510519b9b679d096efb0302e1e779ff2cb7faab\",\"license\":\"MIT\"},\"contracts/oracles/DodoOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IDodo.sol\\\";\\nimport \\\"../interfaces/IDodoFactories.sol\\\";\\n\\ncontract DodoOracle is IOracle {\\n    using Math for uint256;\\n\\n    IDodoZoo public immutable FACTORY; // dodoZoo\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n    IDodo private constant _ZERO_DODO = IDodo(0x0000000000000000000000000000000000000000);\\n\\n    constructor(IDodoZoo _dodoZoo) {\\n        FACTORY = _dodoZoo;\\n    }\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector, uint256 /*thresholdFilter*/) external view override returns (uint256 rate, uint256 weight) {\\n        uint256 balanceSrc;\\n        uint256 balanceDst;\\n        if (connector == _NONE) {\\n            (rate, balanceSrc, balanceDst) = _getDodoInfo(address(srcToken), address(dstToken));\\n            weight = (balanceSrc * balanceDst).sqrt();\\n        } else {\\n            uint256 balanceConnector0;\\n            uint256 balanceConnector1;\\n            uint256 rateSrcConnector;\\n            uint256 rateConnectorDst;\\n            (rateSrcConnector, balanceSrc, balanceConnector0) = _getDodoInfo(address(srcToken), address(connector));\\n            (rateConnectorDst, balanceConnector1, balanceDst) = _getDodoInfo(address(connector), address(dstToken));\\n            weight = Math.min(balanceSrc * balanceConnector0, balanceDst * balanceConnector1).sqrt();\\n            rate = Math.mulDiv(rateSrcConnector, rateConnectorDst, 1e18);\\n        }\\n    }\\n\\n    function _getDodoInfo(address srcToken, address dstToken) internal view returns (uint256 rate, uint256 balanceSrc, uint256 balanceDst) {\\n        IDodo dodo = IDodo(FACTORY.getDODO(srcToken, dstToken));\\n        bool isSrcBase = (dodo != _ZERO_DODO);\\n        if (!isSrcBase) dodo = IDodo(FACTORY.getDODO(dstToken, srcToken));\\n        if(dodo == _ZERO_DODO) revert PoolNotFound();\\n\\n        uint256 price = dodo.getMidPrice();\\n        rate = isSrcBase ? price : 1e36 / price;\\n        uint256 b0 = dodo._BASE_BALANCE_();\\n        uint256 b1 = dodo._QUOTE_BALANCE_();\\n        (balanceSrc, balanceDst) = isSrcBase ? (b0, b1) : (b1, b0);\\n    }\\n}\\n\",\"keccak256\":\"0x4759601e68c6fc9d4f8e2d23dd390deca2287ccb14d25dc9287a8fdaac5f2b7b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03461007157601f61090d38819003918201601f19168301916001600160401b038311848410176100765780849260209460405283398101031261007157516001600160a01b038116810361007157608052604051610880908161008d823960805181818161018301526105560152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c9081632dd31000146101395750633d549b321461003757600080fd5b346101365760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610136576004359073ffffffffffffffffffffffffffffffffffffffff918281168091036101325760243591838316809303610136576044358481168091036101325760409481036100da5750506100c06100c9926100ce926104f6565b909391936101a7565b610312565b82519182526020820152f35b6101096100ff9261010f836100f561011f95610125986104f6565b97919990926104f6565b95919790926101a7565b936101a7565b90508082101561012b5750610312565b92610222565b906100ce565b9050610312565b5080fd5b80fd5b90503461013257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101325760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b818102929181159184041417156101ba57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81156101f3570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183098183029182808310920391808303921461030157670de0b6b3a764000090828211156102a3577faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac10669940990828211900360ee1b910360121c170290565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f7700000000000000000000006044820152fd5b5050670de0b6b3a764000091500490565b801561044f576103dd816000908360801c80610443575b508060401c80610436575b508060201c80610429575b508060101c8061041c575b508060081c8061040f575b508060041c80610402575b508060021c806103f5575b50600191828092811c6103ee575b1c1b61038581856101e9565b01811c61039281856101e9565b01811c61039f81856101e9565b01811c6103ac81856101e9565b01811c6103b981856101e9565b01811c6103c681856101e9565b01811c6103d381856101e9565b01901c80926101e9565b808210156103e9575090565b905090565b0181610379565b600291509101903861036b565b6004915091019038610360565b6008915091019038610355565b601091509101903861034a565b602091509101903861033f565b6040915091019038610334565b91505060809038610329565b50600090565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761049657604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b908160209103126104f1575173ffffffffffffffffffffffffffffffffffffffff811681036104f15790565b600080fd5b604080517f1273b0c60000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8481166004808501919091528682166024850152602097969495909492939192917f00000000000000000000000000000000000000000000000000000000000000008416908981604481855afa90811561083f578a9392918691600091610822575b50169384159687159761079c575b5050505050169182156107755783517fee27c68900000000000000000000000000000000000000000000000000000000815286818381875afa90811561076a5760009161073d575b50600083156106f457505b958451937feab5d20e00000000000000000000000000000000000000000000000000000000855281858481845afa9485156106e9576000956106ba575b5081908651938480927f7c9b8e890000000000000000000000000000000000000000000000000000000082525afa9485156106b0575060009461067f575b50501561067b5791565b9091565b8181959293953d83116106a9575b6106978183610455565b81010312610136575051913880610671565b503d61068d565b513d6000823e3d90fd5b90948282813d83116106e2575b6106d18183610455565b810103126101365750519381610633565b503d6106c7565b86513d6000823e3d90fd5b811561071157506ec097ce7bc90715b34b9f1000000000046105f6565b806012847f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b908782813d8311610763575b6107538183610455565b81010312610136575051386105eb565b503d610749565b85513d6000823e3d90fd5b83517f76ecffc0000000000000000000000000000000000000000000000000000000008152fd5b895190815273ffffffffffffffffffffffffffffffffffffffff918216898201908152939091166020840152935083918290819060400103915afa90811561076a579082916000916107f5575b501686388080806105a3565b6108159150883d8a1161081b575b61080d8183610455565b8101906104c5565b386107e9565b503d610803565b6108399150853d871161081b5761080d8183610455565b38610595565b88513d6000823e3d90fdfea26469706673582212209dcb64c52f608d0534f7592400e99fa230eb8c3da0bb7d58055611d5f60493f264736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c9081632dd31000146101395750633d549b321461003757600080fd5b346101365760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610136576004359073ffffffffffffffffffffffffffffffffffffffff918281168091036101325760243591838316809303610136576044358481168091036101325760409481036100da5750506100c06100c9926100ce926104f6565b909391936101a7565b610312565b82519182526020820152f35b6101096100ff9261010f836100f561011f95610125986104f6565b97919990926104f6565b95919790926101a7565b936101a7565b90508082101561012b5750610312565b92610222565b906100ce565b9050610312565b5080fd5b80fd5b90503461013257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101325760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b818102929181159184041417156101ba57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81156101f3570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183098183029182808310920391808303921461030157670de0b6b3a764000090828211156102a3577faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac10669940990828211900360ee1b910360121c170290565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d6174683a206d756c446976206f766572666c6f7700000000000000000000006044820152fd5b5050670de0b6b3a764000091500490565b801561044f576103dd816000908360801c80610443575b508060401c80610436575b508060201c80610429575b508060101c8061041c575b508060081c8061040f575b508060041c80610402575b508060021c806103f5575b50600191828092811c6103ee575b1c1b61038581856101e9565b01811c61039281856101e9565b01811c61039f81856101e9565b01811c6103ac81856101e9565b01811c6103b981856101e9565b01811c6103c681856101e9565b01811c6103d381856101e9565b01901c80926101e9565b808210156103e9575090565b905090565b0181610379565b600291509101903861036b565b6004915091019038610360565b6008915091019038610355565b601091509101903861034a565b602091509101903861033f565b6040915091019038610334565b91505060809038610329565b50600090565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761049657604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b908160209103126104f1575173ffffffffffffffffffffffffffffffffffffffff811681036104f15790565b600080fd5b604080517f1273b0c60000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8481166004808501919091528682166024850152602097969495909492939192917f00000000000000000000000000000000000000000000000000000000000000008416908981604481855afa90811561083f578a9392918691600091610822575b50169384159687159761079c575b5050505050169182156107755783517fee27c68900000000000000000000000000000000000000000000000000000000815286818381875afa90811561076a5760009161073d575b50600083156106f457505b958451937feab5d20e00000000000000000000000000000000000000000000000000000000855281858481845afa9485156106e9576000956106ba575b5081908651938480927f7c9b8e890000000000000000000000000000000000000000000000000000000082525afa9485156106b0575060009461067f575b50501561067b5791565b9091565b8181959293953d83116106a9575b6106978183610455565b81010312610136575051913880610671565b503d61068d565b513d6000823e3d90fd5b90948282813d83116106e2575b6106d18183610455565b810103126101365750519381610633565b503d6106c7565b86513d6000823e3d90fd5b811561071157506ec097ce7bc90715b34b9f1000000000046105f6565b806012847f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b908782813d8311610763575b6107538183610455565b81010312610136575051386105eb565b503d610749565b85513d6000823e3d90fd5b83517f76ecffc0000000000000000000000000000000000000000000000000000000008152fd5b895190815273ffffffffffffffffffffffffffffffffffffffff918216898201908152939091166020840152935083918290819060400103915afa90811561076a579082916000916107f5575b501686388080806105a3565b6108159150883d8a1161081b575b61080d8183610455565b8101906104c5565b386107e9565b503d610803565b6108399150853d871161081b5761080d8183610455565b38610595565b88513d6000823e3d90fdfea26469706673582212209dcb64c52f608d0534f7592400e99fa230eb8c3da0bb7d58055611d5f60493f264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}