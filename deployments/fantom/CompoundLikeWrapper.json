{
  "address": "0x67f0a177AE57EF82f7fD4F6c37Dc87A29aD4D2cB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IComptroller",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "cBase",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICToken[]",
          "name": "markets",
          "type": "address[]"
        }
      ],
      "name": "addMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokenToToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICToken[]",
          "name": "markets",
          "type": "address[]"
        }
      ],
      "name": "removeMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenTocToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "wrappedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd20fc19000749dd11c905896ab9a7d5de1fb5540945230e28f74a82268d11c6",
  "receipt": {
    "to": null,
    "from": "0x08f2112B3bA6c20c76988BaB9Ad94F7676652608",
    "contractAddress": "0x67f0a177AE57EF82f7fD4F6c37Dc87A29aD4D2cB",
    "transactionIndex": 9,
    "gasUsed": "717638",
    "logsBloom": "0x
    "blockHash": "0x000173610000092cd52dbc8df3ae3d8751dfc1fd48b51aad2ab09fb5d8c693b2",
    "transactionHash": "0xfd20fc19000749dd11c905896ab9a7d5de1fb5540945230e28f74a82268d11c6",
    "logs": [],
    "blockNumber": 34025909,
    "cumulativeGasUsed": "3440265",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x260E596DAbE3AFc463e75B6CC05d8c46aCAcFB09",
    "0xe0654C8e6fd4D733349ac7E09f6f23DA256bF475"
  ],
  "numDeployments": 1,
  "solcInputHash": "27933fcff4787bd8e116fb7cf9934456",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"cBase\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract ICToken[]\",\"name\":\"markets\",\"type\":\"address[]\"}],\"name\":\"addMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokenToToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICToken[]\",\"name\":\"markets\",\"type\":\"address[]\"}],\"name\":\"removeMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTocToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wrappers/CompoundLikeWrapper.sol\":\"CompoundLikeWrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"contracts/interfaces/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface ICToken is IERC20 {\\n    function underlying() external view returns (IERC20 token);\\n    function exchangeRateStored() external view returns (uint256 exchangeRate);\\n}\\n\",\"keccak256\":\"0x6674af81c6532f917ac6e7760d24418a15094ea99baa3e174daf5637a4a0f74c\",\"license\":\"MIT\"},\"contracts/interfaces/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n\\ninterface IComptroller {\\n    function getAllMarkets() external view returns (ICToken[] memory);\\n    function markets(ICToken market) external view returns (bool isListed, uint256 collateralFactorMantissa, bool isComped);\\n}\\n\",\"keccak256\":\"0x540aa41fc7bd8bff4958c66b0ede3f504dcec01f03f17af773330e3d391f0b41\",\"license\":\"MIT\"},\"contracts/interfaces/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IWrapper {\\n    function wrap(IERC20 token) external view returns (IERC20 wrappedToken, uint256 rate);\\n}\\n\",\"keccak256\":\"0xfacec397c79a3f34ace20973299af64303e3a87a143ed377cef3afa2e87bdbb1\",\"license\":\"MIT\"},\"contracts/wrappers/CompoundLikeWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"../interfaces/IComptroller.sol\\\";\\nimport \\\"../interfaces/IWrapper.sol\\\";\\n\\n\\ncontract CompoundLikeWrapper is IWrapper {\\n    IComptroller private immutable _comptroller;\\n    IERC20 private constant _BASE = IERC20(0x0000000000000000000000000000000000000000);\\n    IERC20 private immutable _cBase;\\n\\n    mapping(IERC20 => IERC20) public cTokenToToken;\\n    mapping(IERC20 => IERC20) public tokenTocToken;\\n\\n    constructor(IComptroller comptroller, IERC20 cBase) {\\n        _comptroller = comptroller;\\n        _cBase = cBase;\\n    }\\n\\n    function addMarkets(ICToken[] memory markets) external {\\n        unchecked {\\n            for (uint256 i = 0; i < markets.length; i++) {\\n                (bool isListed, , ) = _comptroller.markets(markets[i]);\\n                require(isListed, \\\"Market is not listed\\\");\\n                IERC20 underlying = markets[i].underlying();\\n                cTokenToToken[markets[i]] = underlying;\\n                tokenTocToken[underlying] = markets[i];\\n            }\\n        }\\n    }\\n\\n    function removeMarkets(ICToken[] memory markets) external {\\n        unchecked {\\n            for (uint256 i = 0; i < markets.length; i++) {\\n                (bool isListed, , ) = _comptroller.markets(markets[i]);\\n                require(!isListed, \\\"Market is listed\\\");\\n                IERC20 underlying = markets[i].underlying();\\n                delete cTokenToToken[markets[i]];\\n                delete tokenTocToken[underlying];\\n            }\\n        }\\n    }\\n\\n    function wrap(IERC20 token) external view override returns (IERC20 wrappedToken, uint256 rate) {\\n        if (token == _BASE) {\\n            return (_cBase, 1e36 / ICToken(address(_cBase)).exchangeRateStored());\\n        } else if (token == _cBase) {\\n            return (_BASE, ICToken(address(_cBase)).exchangeRateStored());\\n        }\\n        IERC20 underlying = cTokenToToken[token];\\n        IERC20 cToken = tokenTocToken[token];\\n        if (underlying != IERC20(address(0))) {\\n            return (underlying, ICToken(address(token)).exchangeRateStored());\\n        } else if (cToken != IERC20(address(0))) {\\n            return (cToken, 1e36 / ICToken(address(cToken)).exchangeRateStored());\\n        } else {\\n            revert(\\\"Unsupported token\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed6a9147243531148dcb38bcf908eed340e39add86fdded34d01b65fa6a9489c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610c9f380380610c9f8339818101604052604081101561003357600080fd5b5080516020909101516001600160a01b039182166080521660a05260805160a051610c1061008f600039600081816102e501528181610306015281816103ab015261040101526000818161065301526108ac0152610c106000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637d683561116100505780637d6835611461013a578063bfef7bdf1461017d578063da40385d1461022257600080fd5b8063023276f01461006c57806346bfac4a146100cf575b600080fd5b61009f6004803603602081101561008257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166102c5565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091528051918290030190f35b610111600480360360208110156100e557600080fd5b506000602081905273ffffffffffffffffffffffffffffffffffffffff91358216815260409020541681565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101116004803603602081101561015057600080fd5b50600160205273ffffffffffffffffffffffffffffffffffffffff90358116600090815260409020541681565b6102206004803603602081101561019357600080fd5b8101906020810181356401000000008111156101ae57600080fd5b8201836020820111156101c057600080fd5b803590602001918460208302840111640100000000831117156101e257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610643945050505050565b005b6102206004803603602081101561023857600080fd5b81019060208101813564010000000081111561025357600080fd5b82018360208201111561026557600080fd5b8035906020019184602083028401116401000000008311171561028757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061089c945050505050565b60008073ffffffffffffffffffffffffffffffffffffffff83166103a9577f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561036f573d6000803e3d6000fd5b505050506040513d602081101561038557600080fd5b50516103a0906ec097ce7bc90715b34b9f1000000000610b70565b91509150915091565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561048c5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046a573d6000803e3d6000fd5b505050506040513d602081101561048057600080fd5b50519094909350915050565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260208181526040808320546001909252909120549082169116811561053857818573ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610514573d6000803e3d6000fd5b505050506040513d602081101561052a57600080fd5b505190969095509350505050565b73ffffffffffffffffffffffffffffffffffffffff8116156105dc57808173ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105a0573d6000803e3d6000fd5b505050506040513d60208110156105b657600080fd5b50516105d1906ec097ce7bc90715b34b9f1000000000610b70565b935093505050915091565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f556e737570706f7274656420746f6b656e000000000000000000000000000000604482015290519081900360640190fd5b60005b81518110156108985760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638e8f294b84848151811061069f5761069f610bab565b60200260200101516040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050606060405180830381865afa1580156106f6573d6000803e3d6000fd5b505050506040513d606081101561070c57600080fd5b50519050801561077d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4d61726b6574206973206c697374656400000000000000000000000000000000604482015290519081900360640190fd5b600083838151811061079157610791610bab565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e3573d6000803e3d6000fd5b505050506040513d60208110156107f957600080fd5b50518451909150600090819086908690811061081757610817610bab565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff9081168352828201939093526040918201600090812080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915594909316835260019081905291208054909216909155919091019050610646565b5050565b60005b81518110156108985760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638e8f294b8484815181106108f8576108f8610bab565b60200260200101516040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050606060405180830381865afa15801561094f573d6000803e3d6000fd5b505050506040513d606081101561096557600080fd5b50519050806109d557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4d61726b6574206973206e6f74206c6973746564000000000000000000000000604482015290519081900360640190fd5b60008383815181106109e9576109e9610bab565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a3b573d6000803e3d6000fd5b505050506040513d6020811015610a5157600080fd5b5051845190915081906000908190879087908110610a7157610a71610bab565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838381518110610b0357610b03610bab565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff92831660009081526001928390526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016939091169290921790915591909101905061089f565b600082610ba6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220a143df38f5a7cc6ba2e0f233952bdf95a7c55af3350e9ea91dc2fa566861655b64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80637d683561116100505780637d6835611461013a578063bfef7bdf1461017d578063da40385d1461022257600080fd5b8063023276f01461006c57806346bfac4a146100cf575b600080fd5b61009f6004803603602081101561008257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166102c5565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091528051918290030190f35b610111600480360360208110156100e557600080fd5b506000602081905273ffffffffffffffffffffffffffffffffffffffff91358216815260409020541681565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101116004803603602081101561015057600080fd5b50600160205273ffffffffffffffffffffffffffffffffffffffff90358116600090815260409020541681565b6102206004803603602081101561019357600080fd5b8101906020810181356401000000008111156101ae57600080fd5b8201836020820111156101c057600080fd5b803590602001918460208302840111640100000000831117156101e257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610643945050505050565b005b6102206004803603602081101561023857600080fd5b81019060208101813564010000000081111561025357600080fd5b82018360208201111561026557600080fd5b8035906020019184602083028401116401000000008311171561028757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061089c945050505050565b60008073ffffffffffffffffffffffffffffffffffffffff83166103a9577f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561036f573d6000803e3d6000fd5b505050506040513d602081101561038557600080fd5b50516103a0906ec097ce7bc90715b34b9f1000000000610b70565b91509150915091565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561048c5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046a573d6000803e3d6000fd5b505050506040513d602081101561048057600080fd5b50519094909350915050565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260208181526040808320546001909252909120549082169116811561053857818573ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610514573d6000803e3d6000fd5b505050506040513d602081101561052a57600080fd5b505190969095509350505050565b73ffffffffffffffffffffffffffffffffffffffff8116156105dc57808173ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105a0573d6000803e3d6000fd5b505050506040513d60208110156105b657600080fd5b50516105d1906ec097ce7bc90715b34b9f1000000000610b70565b935093505050915091565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f556e737570706f7274656420746f6b656e000000000000000000000000000000604482015290519081900360640190fd5b60005b81518110156108985760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638e8f294b84848151811061069f5761069f610bab565b60200260200101516040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050606060405180830381865afa1580156106f6573d6000803e3d6000fd5b505050506040513d606081101561070c57600080fd5b50519050801561077d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4d61726b6574206973206c697374656400000000000000000000000000000000604482015290519081900360640190fd5b600083838151811061079157610791610bab565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e3573d6000803e3d6000fd5b505050506040513d60208110156107f957600080fd5b50518451909150600090819086908690811061081757610817610bab565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff9081168352828201939093526040918201600090812080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915594909316835260019081905291208054909216909155919091019050610646565b5050565b60005b81518110156108985760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638e8f294b8484815181106108f8576108f8610bab565b60200260200101516040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050606060405180830381865afa15801561094f573d6000803e3d6000fd5b505050506040513d606081101561096557600080fd5b50519050806109d557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4d61726b6574206973206e6f74206c6973746564000000000000000000000000604482015290519081900360640190fd5b60008383815181106109e9576109e9610bab565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a3b573d6000803e3d6000fd5b505050506040513d6020811015610a5157600080fd5b5051845190915081906000908190879087908110610a7157610a71610bab565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838381518110610b0357610b03610bab565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff92831660009081526001928390526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016939091169290921790915591909101905061089f565b600082610ba6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220a143df38f5a7cc6ba2e0f233952bdf95a7c55af3350e9ea91dc2fa566861655b64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7441,
        "contract": "contracts/wrappers/CompoundLikeWrapper.sol:CompoundLikeWrapper",
        "label": "cTokenToToken",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_contract(IERC20)770,t_contract(IERC20)770)"
      },
      {
        "astId": 7447,
        "contract": "contracts/wrappers/CompoundLikeWrapper.sol:CompoundLikeWrapper",
        "label": "tokenTocToken",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IERC20)770,t_contract(IERC20)770)"
      }
    ],
    "types": {
      "t_contract(IERC20)770": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20)770,t_contract(IERC20)770)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)770",
        "label": "mapping(contract IERC20 => contract IERC20)",
        "numberOfBytes": "32",
        "value": "t_contract(IERC20)770"
      }
    }
  }
}