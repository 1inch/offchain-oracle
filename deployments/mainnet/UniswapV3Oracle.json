{
  "address": "0xCB47cc5865f90D8A1Aec5B03D38642C144D9d07d",
  "abi": [
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd663cecd878746e94ff5ba308923d9576798aa12943b04f7f3a9b27c0d4619d3",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xCB47cc5865f90D8A1Aec5B03D38642C144D9d07d",
    "transactionIndex": 122,
    "gasUsed": "753591",
    "logsBloom": "0x
    "blockHash": "0x010d2487c83952d6edc49e85fe2ab45fffccc7a3a6c84b3c4ac8e1124bc2a7a3",
    "transactionHash": "0xd663cecd878746e94ff5ba308923d9576798aa12943b04f7f3a9b27c0d4619d3",
    "logs": [],
    "blockNumber": 16486562,
    "cumulativeGasUsed": "13103877",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "9f47030e44e32ad4c47b9f953f174ae8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/UniswapV3Oracle.sol\":\"UniswapV3Oracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IOracle {\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0x79a4ea9de990b73c5ee60ba5c8273e28ebf3a0c85297c9fde1c7f202b0527e2d\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IUniswapV3Pool {\\n    function slot0() external view returns (uint160 sqrtPriceX96, int24, uint16, uint16, uint16, uint8, bool);\\n    function ticks(int24 tick) external view returns (uint128, int128, uint256, uint256, int56, uint160, uint32, bool);\\n    function tickSpacing() external view returns (int24);\\n    function token0() external view returns (IERC20 token);\\n    function liquidity() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0x2096373fab7ce635867e06cb0d9b3f28e6c6200c70cd2d1bb5b8696aaf5bb2d2\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\n\\nlibrary Sqrt {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        unchecked {\\n            if (y > 3) {\\n                z = y;\\n                uint x = y / 2 + 1;\\n                while (x < z) {\\n                    z = x;\\n                    x = (y / x + x) / 2;\\n                }\\n            } else if (y != 0) {\\n                z = 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d1e9c161f5ea08953aa0069c696263bb9c0e3a5601f307253b5174d9a10e4b4\",\"license\":\"MIT\"},\"contracts/oracles/UniswapV3Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"../libraries/Sqrt.sol\\\";\\n\\ncontract UniswapV3Oracle is IOracle {\\n    using Address for address;\\n    using SafeMath for uint256;\\n    using Sqrt for uint256;\\n\\n    bytes32 public constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n    address public constant FACTORY = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n    uint256 private constant _SUPPORTED_FEES_COUNT = 4;\\n    int24 private constant _TICK_STEPS = 2;\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external override view returns (uint256 rate, uint256 weight) {\\n        uint24[_SUPPORTED_FEES_COUNT] memory fees = [uint24(100), 500, 3000, 10000];\\n\\n        unchecked {\\n            if (connector == _NONE) {\\n                for (uint256 i = 0; i < _SUPPORTED_FEES_COUNT; i++) {\\n                    (uint256 rate0, uint256 w) = _getRate(srcToken, dstToken, fees[i]);\\n                    rate = rate.add(rate0.mul(w));\\n                    weight = weight.add(w);\\n                }\\n            } else {\\n                for (uint256 i = 0; i < _SUPPORTED_FEES_COUNT; i++) {\\n                    for (uint256 j = 0; j < _SUPPORTED_FEES_COUNT; j++) {\\n                        (uint256 rate0, uint256 w0) = _getRate(srcToken, connector, fees[i]);\\n                        if (w0 == 0) {\\n                            continue;\\n                        }\\n                        (uint256 rate1, uint256 w1) = _getRate(connector, dstToken, fees[j]);\\n                        if (w1 == 0) {\\n                            continue;\\n                        }\\n\\n                        uint256 w = Sqrt.sqrt(w0 * w1);\\n\\n                        rate = rate.add(rate0.mul(rate1).div(1e18).mul(w));\\n                        weight = weight.add(w);\\n                    }\\n                }\\n            }\\n        }\\n\\n        if (weight > 0) {\\n            rate = rate / weight;\\n        }\\n    }\\n\\n    function _getRate(IERC20 srcToken, IERC20 dstToken, uint24 fee) internal view returns (uint256 rate, uint256 liquidity) {\\n        (IERC20 token0, IERC20 token1) = srcToken < dstToken ? (srcToken, dstToken) : (dstToken, srcToken);\\n        address pool = _getPool(address(token0), address(token1), fee);\\n        if (!pool.isContract() ) {\\n            return (0, 0);\\n        }\\n        liquidity = IUniswapV3Pool(pool).liquidity();\\n        if (liquidity == 0) {\\n            return (0, 0);\\n        }\\n        (uint256 sqrtPriceX96, int24 tick,,,,,) = IUniswapV3Pool(pool).slot0();\\n        int24 tickSpacing = IUniswapV3Pool(pool).tickSpacing();\\n        tick = tick / tickSpacing * tickSpacing;\\n        int256 liquidityShiftsLeft = int256(liquidity);\\n        int256 liquidityShiftsRight = int256(liquidity);\\n        for (int24 i = 1; i <= _TICK_STEPS; i++) {\\n            (, int256 liquidityNet,,,,,,) = IUniswapV3Pool(pool).ticks(tick + i * tickSpacing);\\n            liquidityShiftsRight += liquidityNet;\\n            if (liquidityShiftsRight == 0) {\\n                return (0, 0);\\n            }\\n            (, liquidityNet,,,,,,) = IUniswapV3Pool(pool).ticks(tick - i * tickSpacing);\\n            liquidityShiftsLeft -= liquidityNet;\\n            if (liquidityShiftsLeft == 0) {\\n                return (0, 0);\\n            }\\n        }\\n        if (srcToken == token0) {\\n            rate = (((1e18 * sqrtPriceX96) >> 96) * sqrtPriceX96) >> 96;\\n        } else {\\n            rate = (1e18 << 192) / sqrtPriceX96 / sqrtPriceX96;\\n        }\\n    }\\n\\n    function _getPool(address token0, address token1, uint24 fee) private pure returns (address) {\\n        return address(uint160(uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        FACTORY,\\n                        keccak256(abi.encode(token0, token1, fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )));\\n    }\\n}\\n\",\"keccak256\":\"0xdc6d79c89330678c7de3041f97bfdf5943d112599042c50c0a7c41b712710041\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610cba806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806314999e79146100465780632dd31000146100a4578063dc6fd8ab146100e8575b600080fd5b61008b6004803603606081101561005c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516610121565b6040805192835260208301919091528051918290030190f35b6100bf731f98431c8ad98523631ae4a59f267346ea31f98481565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61010f7fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5481565b60408051918252519081900360200190f35b60408051608081018252606481526101f46020820152610bb891810191909152612710606082015260009081907fffffffffffffffffffffffff000000000000000000000000000000000000000173ffffffffffffffffffffffffffffffffffffffff8516016101f25760005b60048110156101ec576000806101bb89898686600481106101b1576101b16108a1565b60200201516102e8565b90925090506101d46101cd8383610818565b879061082b565b95506101e0858261082b565b9450505060010161018e565b506102cc565b60005b60048110156102ca5760005b60048110156102c1576000806102248a898787600481106101b1576101b16108a1565b91509150806000036102375750506102b9565b6000806102518a8c8988600481106101b1576101b16108a1565b915091508060000361026657505050506102b9565b6000610273828502610837565b90506102a561029e82610298670de0b6b3a76400006102928a89610818565b90610895565b90610818565b8b9061082b565b99506102b1898261082b565b985050505050505b600101610201565b506001016101f5565b505b81156102df576102dc828461092e565b92505b50935093915050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161061032857858761032b565b86865b6040805173ffffffffffffffffffffffffffffffffffffffff8085166020808401919091529084168284015262ffffff8a16606080840191909152835180840390910181526080830184528051908201207fff0000000000000000000000000000000000000000000000000000000000000060a08401527f1f98431c8ad98523631ae4a59f267346ea31f98400000000000000000000000060a184015260b58301527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808401919091528351808403909101815260f59092019092528051910120919350915073ffffffffffffffffffffffffffffffffffffffff81163b61043e5760008094509450505050610810565b8073ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b8152600401602060405180830381865afa158015610489573d6000803e3d6000fd5b505050506040513d602081101561049f57600080fd5b50516fffffffffffffffffffffffffffffffff16935060008490036104cd5760008094509450505050610810565b6000808273ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801561051b573d6000803e3d6000fd5b505050506040513d60e081101561053157600080fd5b508051602091820151604080517fd0c93a7c000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff93841696509194506000939287169263d0c93a7c926004808401938290030181865afa1580156105ac573d6000803e3d6000fd5b505050506040513d60208110156105c257600080fd5b50519050806105d18184610942565b6105db91906109b6565b9150868060015b600281810b1361077157600073ffffffffffffffffffffffffffffffffffffffff881663f30dba9361061487856109b6565b61061e9089610a5f565b6040518263ffffffff1660e01b8152600401808260020b815260200191505061010060405180830381865afa15801561065b573d6000803e3d6000fd5b505050506040513d61010081101561067257600080fd5b5060200151600f0b90506106868184610ac2565b9250826000036106a6576000809b509b5050505050505050505050610810565b73ffffffffffffffffffffffffffffffffffffffff881663f30dba936106cc87856109b6565b6106d69089610b36565b6040518263ffffffff1660e01b8152600401808260020b815260200191505061010060405180830381865afa158015610713573d6000803e3d6000fd5b505050506040513d61010081101561072a57600080fd5b5060200151600f0b905061073e8185610b9a565b93508360000361075e576000809b509b5050505050505050505050610810565b508061076981610c0e565b9150506105e2565b508773ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16036107cf57606085816107bb82670de0b6b3a7640000610c2f565b6107c692911c610c2f565b901c9950610807565b846107fa817f0de0b6b3a764000000000000000000000000000000000000000000000000000061092e565b610804919061092e565b99505b50505050505050505b935093915050565b60006108248284610c2f565b9392505050565b60006108248284610c6c565b60006003821115610886575080600160028204015b8181101561088057809150600281828581610869576108696108d0565b040181610878576108786108d0565b04905061084c565b50919050565b8115610890575060015b919050565b6000610824828461092e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008261093d5761093d6108d0565b500490565b60008160020b8360020b80610959576109596108d0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000831416156109ad576109ad6108ff565b90059392505050565b60008160020b8360020b627fffff6000821360008413838304851182821616156109e2576109e26108ff565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000006000851286820586128184161615610a1d57610a1d6108ff565b60008712925085820587128484161615610a3957610a396108ff565b85850587128184161615610a4f57610a4f6108ff565b5050509290910295945050505050565b60008160020b8360020b6000821282627fffff03821381151615610a8557610a856108ff565b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000038212811615610ab957610ab96108ff565b50019392505050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615610afc57610afc6108ff565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615610b3057610b306108ff565b50500190565b60008160020b8360020b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000001831281151615610b7957610b796108ff565b81627fffff018313811615610b9057610b906108ff565b5090039392505050565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615610bd457610bd46108ff565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615610c0857610c086108ff565b50500390565b60008160020b627fffff8103610c2657610c266108ff565b60010192915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c6757610c676108ff565b500290565b60008219821115610c7f57610c7f6108ff565b50019056fea26469706673582212201395cda7c8a3c74b820730e53cbaceb654b28aeccb231926c0a230b9da4c991764736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806314999e79146100465780632dd31000146100a4578063dc6fd8ab146100e8575b600080fd5b61008b6004803603606081101561005c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516610121565b6040805192835260208301919091528051918290030190f35b6100bf731f98431c8ad98523631ae4a59f267346ea31f98481565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61010f7fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5481565b60408051918252519081900360200190f35b60408051608081018252606481526101f46020820152610bb891810191909152612710606082015260009081907fffffffffffffffffffffffff000000000000000000000000000000000000000173ffffffffffffffffffffffffffffffffffffffff8516016101f25760005b60048110156101ec576000806101bb89898686600481106101b1576101b16108a1565b60200201516102e8565b90925090506101d46101cd8383610818565b879061082b565b95506101e0858261082b565b9450505060010161018e565b506102cc565b60005b60048110156102ca5760005b60048110156102c1576000806102248a898787600481106101b1576101b16108a1565b91509150806000036102375750506102b9565b6000806102518a8c8988600481106101b1576101b16108a1565b915091508060000361026657505050506102b9565b6000610273828502610837565b90506102a561029e82610298670de0b6b3a76400006102928a89610818565b90610895565b90610818565b8b9061082b565b99506102b1898261082b565b985050505050505b600101610201565b506001016101f5565b505b81156102df576102dc828461092e565b92505b50935093915050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161061032857858761032b565b86865b6040805173ffffffffffffffffffffffffffffffffffffffff8085166020808401919091529084168284015262ffffff8a16606080840191909152835180840390910181526080830184528051908201207fff0000000000000000000000000000000000000000000000000000000000000060a08401527f1f98431c8ad98523631ae4a59f267346ea31f98400000000000000000000000060a184015260b58301527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808401919091528351808403909101815260f59092019092528051910120919350915073ffffffffffffffffffffffffffffffffffffffff81163b61043e5760008094509450505050610810565b8073ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b8152600401602060405180830381865afa158015610489573d6000803e3d6000fd5b505050506040513d602081101561049f57600080fd5b50516fffffffffffffffffffffffffffffffff16935060008490036104cd5760008094509450505050610810565b6000808273ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801561051b573d6000803e3d6000fd5b505050506040513d60e081101561053157600080fd5b508051602091820151604080517fd0c93a7c000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff93841696509194506000939287169263d0c93a7c926004808401938290030181865afa1580156105ac573d6000803e3d6000fd5b505050506040513d60208110156105c257600080fd5b50519050806105d18184610942565b6105db91906109b6565b9150868060015b600281810b1361077157600073ffffffffffffffffffffffffffffffffffffffff881663f30dba9361061487856109b6565b61061e9089610a5f565b6040518263ffffffff1660e01b8152600401808260020b815260200191505061010060405180830381865afa15801561065b573d6000803e3d6000fd5b505050506040513d61010081101561067257600080fd5b5060200151600f0b90506106868184610ac2565b9250826000036106a6576000809b509b5050505050505050505050610810565b73ffffffffffffffffffffffffffffffffffffffff881663f30dba936106cc87856109b6565b6106d69089610b36565b6040518263ffffffff1660e01b8152600401808260020b815260200191505061010060405180830381865afa158015610713573d6000803e3d6000fd5b505050506040513d61010081101561072a57600080fd5b5060200151600f0b905061073e8185610b9a565b93508360000361075e576000809b509b5050505050505050505050610810565b508061076981610c0e565b9150506105e2565b508773ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16036107cf57606085816107bb82670de0b6b3a7640000610c2f565b6107c692911c610c2f565b901c9950610807565b846107fa817f0de0b6b3a764000000000000000000000000000000000000000000000000000061092e565b610804919061092e565b99505b50505050505050505b935093915050565b60006108248284610c2f565b9392505050565b60006108248284610c6c565b60006003821115610886575080600160028204015b8181101561088057809150600281828581610869576108696108d0565b040181610878576108786108d0565b04905061084c565b50919050565b8115610890575060015b919050565b6000610824828461092e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008261093d5761093d6108d0565b500490565b60008160020b8360020b80610959576109596108d0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000831416156109ad576109ad6108ff565b90059392505050565b60008160020b8360020b627fffff6000821360008413838304851182821616156109e2576109e26108ff565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000006000851286820586128184161615610a1d57610a1d6108ff565b60008712925085820587128484161615610a3957610a396108ff565b85850587128184161615610a4f57610a4f6108ff565b5050509290910295945050505050565b60008160020b8360020b6000821282627fffff03821381151615610a8557610a856108ff565b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000038212811615610ab957610ab96108ff565b50019392505050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615610afc57610afc6108ff565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615610b3057610b306108ff565b50500190565b60008160020b8360020b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000001831281151615610b7957610b796108ff565b81627fffff018313811615610b9057610b906108ff565b5090039392505050565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615610bd457610bd46108ff565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615610c0857610c086108ff565b50500390565b60008160020b627fffff8103610c2657610c266108ff565b60010192915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c6757610c676108ff565b500290565b60008219821115610c7f57610c7f6108ff565b50019056fea26469706673582212201395cda7c8a3c74b820730e53cbaceb654b28aeccb231926c0a230b9da4c991764736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}